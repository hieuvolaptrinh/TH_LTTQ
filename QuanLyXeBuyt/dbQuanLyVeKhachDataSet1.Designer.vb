'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dbQuanLyVeKhachDataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dbQuanLyVeKhachDataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableBENXE As BENXEDataTable
    
    Private tableCHUYENDI As CHUYENDIDataTable
    
    Private tableGHE As GHEDataTable
    
    Private tableLOAIGHE As LOAIGHEDataTable
    
    Private tableNGUOIDUNG As NGUOIDUNGDataTable
    
    Private tableTUYENDUONG As TUYENDUONGDataTable
    
    Private tableVE As VEDataTable
    
    Private tableXEBUYT As XEBUYTDataTable
    
    Private relationFK__CHUYENDI__id_Tuy__44FF419A As Global.System.Data.DataRelation
    
    Private relationFK__CHUYENDI__id_XeB__45F365D3 As Global.System.Data.DataRelation
    
    Private relationFK__GHE__id_LoaiGhe__4E88ABD4 As Global.System.Data.DataRelation
    
    Private relationFK__GHE__id_XeBuyt__4D94879B As Global.System.Data.DataRelation
    
    Private relationFK__TUYENDUON__id_Be__412EB0B6 As Global.System.Data.DataRelation
    
    Private relationFK__TUYENDUON__id_Be__4222D4EF As Global.System.Data.DataRelation
    
    Private relationFK__VE__id_ChuyenDi__5441852A As Global.System.Data.DataRelation
    
    Private relationFK__VE__id_Ghe__5629CD9C As Global.System.Data.DataRelation
    
    Private relationFK__VE__id_NguoiDung__5535A963 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BENXE")) Is Nothing) Then
                MyBase.Tables.Add(New BENXEDataTable(ds.Tables("BENXE")))
            End If
            If (Not (ds.Tables("CHUYENDI")) Is Nothing) Then
                MyBase.Tables.Add(New CHUYENDIDataTable(ds.Tables("CHUYENDI")))
            End If
            If (Not (ds.Tables("GHE")) Is Nothing) Then
                MyBase.Tables.Add(New GHEDataTable(ds.Tables("GHE")))
            End If
            If (Not (ds.Tables("LOAIGHE")) Is Nothing) Then
                MyBase.Tables.Add(New LOAIGHEDataTable(ds.Tables("LOAIGHE")))
            End If
            If (Not (ds.Tables("NGUOIDUNG")) Is Nothing) Then
                MyBase.Tables.Add(New NGUOIDUNGDataTable(ds.Tables("NGUOIDUNG")))
            End If
            If (Not (ds.Tables("TUYENDUONG")) Is Nothing) Then
                MyBase.Tables.Add(New TUYENDUONGDataTable(ds.Tables("TUYENDUONG")))
            End If
            If (Not (ds.Tables("VE")) Is Nothing) Then
                MyBase.Tables.Add(New VEDataTable(ds.Tables("VE")))
            End If
            If (Not (ds.Tables("XEBUYT")) Is Nothing) Then
                MyBase.Tables.Add(New XEBUYTDataTable(ds.Tables("XEBUYT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BENXE() As BENXEDataTable
        Get
            Return Me.tableBENXE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CHUYENDI() As CHUYENDIDataTable
        Get
            Return Me.tableCHUYENDI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GHE() As GHEDataTable
        Get
            Return Me.tableGHE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LOAIGHE() As LOAIGHEDataTable
        Get
            Return Me.tableLOAIGHE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NGUOIDUNG() As NGUOIDUNGDataTable
        Get
            Return Me.tableNGUOIDUNG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TUYENDUONG() As TUYENDUONGDataTable
        Get
            Return Me.tableTUYENDUONG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VE() As VEDataTable
        Get
            Return Me.tableVE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property XEBUYT() As XEBUYTDataTable
        Get
            Return Me.tableXEBUYT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dbQuanLyVeKhachDataSet1 = CType(MyBase.Clone,dbQuanLyVeKhachDataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("BENXE")) Is Nothing) Then
                MyBase.Tables.Add(New BENXEDataTable(ds.Tables("BENXE")))
            End If
            If (Not (ds.Tables("CHUYENDI")) Is Nothing) Then
                MyBase.Tables.Add(New CHUYENDIDataTable(ds.Tables("CHUYENDI")))
            End If
            If (Not (ds.Tables("GHE")) Is Nothing) Then
                MyBase.Tables.Add(New GHEDataTable(ds.Tables("GHE")))
            End If
            If (Not (ds.Tables("LOAIGHE")) Is Nothing) Then
                MyBase.Tables.Add(New LOAIGHEDataTable(ds.Tables("LOAIGHE")))
            End If
            If (Not (ds.Tables("NGUOIDUNG")) Is Nothing) Then
                MyBase.Tables.Add(New NGUOIDUNGDataTable(ds.Tables("NGUOIDUNG")))
            End If
            If (Not (ds.Tables("TUYENDUONG")) Is Nothing) Then
                MyBase.Tables.Add(New TUYENDUONGDataTable(ds.Tables("TUYENDUONG")))
            End If
            If (Not (ds.Tables("VE")) Is Nothing) Then
                MyBase.Tables.Add(New VEDataTable(ds.Tables("VE")))
            End If
            If (Not (ds.Tables("XEBUYT")) Is Nothing) Then
                MyBase.Tables.Add(New XEBUYTDataTable(ds.Tables("XEBUYT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBENXE = CType(MyBase.Tables("BENXE"),BENXEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBENXE) Is Nothing) Then
                Me.tableBENXE.InitVars
            End If
        End If
        Me.tableCHUYENDI = CType(MyBase.Tables("CHUYENDI"),CHUYENDIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCHUYENDI) Is Nothing) Then
                Me.tableCHUYENDI.InitVars
            End If
        End If
        Me.tableGHE = CType(MyBase.Tables("GHE"),GHEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGHE) Is Nothing) Then
                Me.tableGHE.InitVars
            End If
        End If
        Me.tableLOAIGHE = CType(MyBase.Tables("LOAIGHE"),LOAIGHEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLOAIGHE) Is Nothing) Then
                Me.tableLOAIGHE.InitVars
            End If
        End If
        Me.tableNGUOIDUNG = CType(MyBase.Tables("NGUOIDUNG"),NGUOIDUNGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNGUOIDUNG) Is Nothing) Then
                Me.tableNGUOIDUNG.InitVars
            End If
        End If
        Me.tableTUYENDUONG = CType(MyBase.Tables("TUYENDUONG"),TUYENDUONGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTUYENDUONG) Is Nothing) Then
                Me.tableTUYENDUONG.InitVars
            End If
        End If
        Me.tableVE = CType(MyBase.Tables("VE"),VEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVE) Is Nothing) Then
                Me.tableVE.InitVars
            End If
        End If
        Me.tableXEBUYT = CType(MyBase.Tables("XEBUYT"),XEBUYTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableXEBUYT) Is Nothing) Then
                Me.tableXEBUYT.InitVars
            End If
        End If
        Me.relationFK__CHUYENDI__id_Tuy__44FF419A = Me.Relations("FK__CHUYENDI__id_Tuy__44FF419A")
        Me.relationFK__CHUYENDI__id_XeB__45F365D3 = Me.Relations("FK__CHUYENDI__id_XeB__45F365D3")
        Me.relationFK__GHE__id_LoaiGhe__4E88ABD4 = Me.Relations("FK__GHE__id_LoaiGhe__4E88ABD4")
        Me.relationFK__GHE__id_XeBuyt__4D94879B = Me.Relations("FK__GHE__id_XeBuyt__4D94879B")
        Me.relationFK__TUYENDUON__id_Be__412EB0B6 = Me.Relations("FK__TUYENDUON__id_Be__412EB0B6")
        Me.relationFK__TUYENDUON__id_Be__4222D4EF = Me.Relations("FK__TUYENDUON__id_Be__4222D4EF")
        Me.relationFK__VE__id_ChuyenDi__5441852A = Me.Relations("FK__VE__id_ChuyenDi__5441852A")
        Me.relationFK__VE__id_Ghe__5629CD9C = Me.Relations("FK__VE__id_Ghe__5629CD9C")
        Me.relationFK__VE__id_NguoiDung__5535A963 = Me.Relations("FK__VE__id_NguoiDung__5535A963")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dbQuanLyVeKhachDataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dbQuanLyVeKhachDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBENXE = New BENXEDataTable()
        MyBase.Tables.Add(Me.tableBENXE)
        Me.tableCHUYENDI = New CHUYENDIDataTable()
        MyBase.Tables.Add(Me.tableCHUYENDI)
        Me.tableGHE = New GHEDataTable()
        MyBase.Tables.Add(Me.tableGHE)
        Me.tableLOAIGHE = New LOAIGHEDataTable()
        MyBase.Tables.Add(Me.tableLOAIGHE)
        Me.tableNGUOIDUNG = New NGUOIDUNGDataTable()
        MyBase.Tables.Add(Me.tableNGUOIDUNG)
        Me.tableTUYENDUONG = New TUYENDUONGDataTable()
        MyBase.Tables.Add(Me.tableTUYENDUONG)
        Me.tableVE = New VEDataTable()
        MyBase.Tables.Add(Me.tableVE)
        Me.tableXEBUYT = New XEBUYTDataTable()
        MyBase.Tables.Add(Me.tableXEBUYT)
        Me.relationFK__CHUYENDI__id_Tuy__44FF419A = New Global.System.Data.DataRelation("FK__CHUYENDI__id_Tuy__44FF419A", New Global.System.Data.DataColumn() {Me.tableTUYENDUONG.id_TuyenDuongColumn}, New Global.System.Data.DataColumn() {Me.tableCHUYENDI.id_TuyenDuongColumn}, false)
        Me.Relations.Add(Me.relationFK__CHUYENDI__id_Tuy__44FF419A)
        Me.relationFK__CHUYENDI__id_XeB__45F365D3 = New Global.System.Data.DataRelation("FK__CHUYENDI__id_XeB__45F365D3", New Global.System.Data.DataColumn() {Me.tableXEBUYT.id_XeBuytColumn}, New Global.System.Data.DataColumn() {Me.tableCHUYENDI.id_XeBuytColumn}, false)
        Me.Relations.Add(Me.relationFK__CHUYENDI__id_XeB__45F365D3)
        Me.relationFK__GHE__id_LoaiGhe__4E88ABD4 = New Global.System.Data.DataRelation("FK__GHE__id_LoaiGhe__4E88ABD4", New Global.System.Data.DataColumn() {Me.tableLOAIGHE.id_LoaiGheColumn}, New Global.System.Data.DataColumn() {Me.tableGHE.id_LoaiGheColumn}, false)
        Me.Relations.Add(Me.relationFK__GHE__id_LoaiGhe__4E88ABD4)
        Me.relationFK__GHE__id_XeBuyt__4D94879B = New Global.System.Data.DataRelation("FK__GHE__id_XeBuyt__4D94879B", New Global.System.Data.DataColumn() {Me.tableXEBUYT.id_XeBuytColumn}, New Global.System.Data.DataColumn() {Me.tableGHE.id_XeBuytColumn}, false)
        Me.Relations.Add(Me.relationFK__GHE__id_XeBuyt__4D94879B)
        Me.relationFK__TUYENDUON__id_Be__412EB0B6 = New Global.System.Data.DataRelation("FK__TUYENDUON__id_Be__412EB0B6", New Global.System.Data.DataColumn() {Me.tableBENXE.id_BenXeColumn}, New Global.System.Data.DataColumn() {Me.tableTUYENDUONG.id_Ben_XuatPhatColumn}, false)
        Me.Relations.Add(Me.relationFK__TUYENDUON__id_Be__412EB0B6)
        Me.relationFK__TUYENDUON__id_Be__4222D4EF = New Global.System.Data.DataRelation("FK__TUYENDUON__id_Be__4222D4EF", New Global.System.Data.DataColumn() {Me.tableBENXE.id_BenXeColumn}, New Global.System.Data.DataColumn() {Me.tableTUYENDUONG.id_Ben_DichColumn}, false)
        Me.Relations.Add(Me.relationFK__TUYENDUON__id_Be__4222D4EF)
        Me.relationFK__VE__id_ChuyenDi__5441852A = New Global.System.Data.DataRelation("FK__VE__id_ChuyenDi__5441852A", New Global.System.Data.DataColumn() {Me.tableCHUYENDI.id_ChuyenDiColumn}, New Global.System.Data.DataColumn() {Me.tableVE.id_ChuyenDiColumn}, false)
        Me.Relations.Add(Me.relationFK__VE__id_ChuyenDi__5441852A)
        Me.relationFK__VE__id_Ghe__5629CD9C = New Global.System.Data.DataRelation("FK__VE__id_Ghe__5629CD9C", New Global.System.Data.DataColumn() {Me.tableGHE.id_GheColumn}, New Global.System.Data.DataColumn() {Me.tableVE.id_GheColumn}, false)
        Me.Relations.Add(Me.relationFK__VE__id_Ghe__5629CD9C)
        Me.relationFK__VE__id_NguoiDung__5535A963 = New Global.System.Data.DataRelation("FK__VE__id_NguoiDung__5535A963", New Global.System.Data.DataColumn() {Me.tableNGUOIDUNG.id_NguoiDungColumn}, New Global.System.Data.DataColumn() {Me.tableVE.id_NguoiDungColumn}, false)
        Me.Relations.Add(Me.relationFK__VE__id_NguoiDung__5535A963)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeBENXE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCHUYENDI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeGHE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeLOAIGHE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeNGUOIDUNG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeTUYENDUONG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeVE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeXEBUYT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub BENXERowChangeEventHandler(ByVal sender As Object, ByVal e As BENXERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CHUYENDIRowChangeEventHandler(ByVal sender As Object, ByVal e As CHUYENDIRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub GHERowChangeEventHandler(ByVal sender As Object, ByVal e As GHERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub LOAIGHERowChangeEventHandler(ByVal sender As Object, ByVal e As LOAIGHERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub NGUOIDUNGRowChangeEventHandler(ByVal sender As Object, ByVal e As NGUOIDUNGRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub TUYENDUONGRowChangeEventHandler(ByVal sender As Object, ByVal e As TUYENDUONGRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub VERowChangeEventHandler(ByVal sender As Object, ByVal e As VERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub XEBUYTRowChangeEventHandler(ByVal sender As Object, ByVal e As XEBUYTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BENXEDataTable
        Inherits Global.System.Data.TypedTableBase(Of BENXERow)
        
        Private columnid_BenXe As Global.System.Data.DataColumn
        
        Private columnten_BenXe As Global.System.Data.DataColumn
        
        Private columndia_Diem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BENXE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_BenXeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_BenXe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ten_BenXeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnten_BenXe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property dia_DiemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndia_Diem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BENXERow
            Get
                Return CType(Me.Rows(index),BENXERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BENXERowChanging As BENXERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BENXERowChanged As BENXERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BENXERowDeleting As BENXERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event BENXERowDeleted As BENXERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddBENXERow(ByVal row As BENXERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddBENXERow(ByVal ten_BenXe As String, ByVal dia_Diem As String) As BENXERow
            Dim rowBENXERow As BENXERow = CType(Me.NewRow,BENXERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ten_BenXe, dia_Diem}
            rowBENXERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBENXERow)
            Return rowBENXERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_BenXe(ByVal id_BenXe As Integer) As BENXERow
            Return CType(Me.Rows.Find(New Object() {id_BenXe}),BENXERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BENXEDataTable = CType(MyBase.Clone,BENXEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BENXEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_BenXe = MyBase.Columns("id_BenXe")
            Me.columnten_BenXe = MyBase.Columns("ten_BenXe")
            Me.columndia_Diem = MyBase.Columns("dia_Diem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_BenXe = New Global.System.Data.DataColumn("id_BenXe", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_BenXe)
            Me.columnten_BenXe = New Global.System.Data.DataColumn("ten_BenXe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnten_BenXe)
            Me.columndia_Diem = New Global.System.Data.DataColumn("dia_Diem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndia_Diem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_BenXe}, true))
            Me.columnid_BenXe.AutoIncrement = true
            Me.columnid_BenXe.AutoIncrementSeed = -1
            Me.columnid_BenXe.AutoIncrementStep = -1
            Me.columnid_BenXe.AllowDBNull = false
            Me.columnid_BenXe.ReadOnly = true
            Me.columnid_BenXe.Unique = true
            Me.columnten_BenXe.AllowDBNull = false
            Me.columnten_BenXe.MaxLength = 100
            Me.columndia_Diem.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewBENXERow() As BENXERow
            Return CType(Me.NewRow,BENXERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BENXERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BENXERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BENXERowChangedEvent) Is Nothing) Then
                RaiseEvent BENXERowChanged(Me, New BENXERowChangeEvent(CType(e.Row,BENXERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BENXERowChangingEvent) Is Nothing) Then
                RaiseEvent BENXERowChanging(Me, New BENXERowChangeEvent(CType(e.Row,BENXERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BENXERowDeletedEvent) Is Nothing) Then
                RaiseEvent BENXERowDeleted(Me, New BENXERowChangeEvent(CType(e.Row,BENXERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BENXERowDeletingEvent) Is Nothing) Then
                RaiseEvent BENXERowDeleting(Me, New BENXERowChangeEvent(CType(e.Row,BENXERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveBENXERow(ByVal row As BENXERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BENXEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CHUYENDIDataTable
        Inherits Global.System.Data.TypedTableBase(Of CHUYENDIRow)
        
        Private columnid_ChuyenDi As Global.System.Data.DataColumn
        
        Private columnid_TuyenDuong As Global.System.Data.DataColumn
        
        Private columnid_XeBuyt As Global.System.Data.DataColumn
        
        Private columngio_Di As Global.System.Data.DataColumn
        
        Private columngio_Den As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CHUYENDI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_ChuyenDiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_ChuyenDi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_TuyenDuongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_TuyenDuong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_XeBuytColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_XeBuyt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property gio_DiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngio_Di
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property gio_DenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngio_Den
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CHUYENDIRow
            Get
                Return CType(Me.Rows(index),CHUYENDIRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHUYENDIRowChanging As CHUYENDIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHUYENDIRowChanged As CHUYENDIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHUYENDIRowDeleting As CHUYENDIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CHUYENDIRowDeleted As CHUYENDIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCHUYENDIRow(ByVal row As CHUYENDIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCHUYENDIRow(ByVal parentTUYENDUONGRowByFK__CHUYENDI__id_Tuy__44FF419A As TUYENDUONGRow, ByVal parentXEBUYTRowByFK__CHUYENDI__id_XeB__45F365D3 As XEBUYTRow, ByVal gio_Di As Date, ByVal gio_Den As Date) As CHUYENDIRow
            Dim rowCHUYENDIRow As CHUYENDIRow = CType(Me.NewRow,CHUYENDIRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, gio_Di, gio_Den}
            If (Not (parentTUYENDUONGRowByFK__CHUYENDI__id_Tuy__44FF419A) Is Nothing) Then
                columnValuesArray(1) = parentTUYENDUONGRowByFK__CHUYENDI__id_Tuy__44FF419A(0)
            End If
            If (Not (parentXEBUYTRowByFK__CHUYENDI__id_XeB__45F365D3) Is Nothing) Then
                columnValuesArray(2) = parentXEBUYTRowByFK__CHUYENDI__id_XeB__45F365D3(0)
            End If
            rowCHUYENDIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCHUYENDIRow)
            Return rowCHUYENDIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_ChuyenDi(ByVal id_ChuyenDi As Integer) As CHUYENDIRow
            Return CType(Me.Rows.Find(New Object() {id_ChuyenDi}),CHUYENDIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CHUYENDIDataTable = CType(MyBase.Clone,CHUYENDIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CHUYENDIDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_ChuyenDi = MyBase.Columns("id_ChuyenDi")
            Me.columnid_TuyenDuong = MyBase.Columns("id_TuyenDuong")
            Me.columnid_XeBuyt = MyBase.Columns("id_XeBuyt")
            Me.columngio_Di = MyBase.Columns("gio_Di")
            Me.columngio_Den = MyBase.Columns("gio_Den")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_ChuyenDi = New Global.System.Data.DataColumn("id_ChuyenDi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_ChuyenDi)
            Me.columnid_TuyenDuong = New Global.System.Data.DataColumn("id_TuyenDuong", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_TuyenDuong)
            Me.columnid_XeBuyt = New Global.System.Data.DataColumn("id_XeBuyt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_XeBuyt)
            Me.columngio_Di = New Global.System.Data.DataColumn("gio_Di", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngio_Di)
            Me.columngio_Den = New Global.System.Data.DataColumn("gio_Den", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngio_Den)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_ChuyenDi}, true))
            Me.columnid_ChuyenDi.AutoIncrement = true
            Me.columnid_ChuyenDi.AutoIncrementSeed = -1
            Me.columnid_ChuyenDi.AutoIncrementStep = -1
            Me.columnid_ChuyenDi.AllowDBNull = false
            Me.columnid_ChuyenDi.ReadOnly = true
            Me.columnid_ChuyenDi.Unique = true
            Me.columnid_TuyenDuong.AllowDBNull = false
            Me.columnid_XeBuyt.AllowDBNull = false
            Me.columngio_Di.AllowDBNull = false
            Me.columngio_Den.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCHUYENDIRow() As CHUYENDIRow
            Return CType(Me.NewRow,CHUYENDIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CHUYENDIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CHUYENDIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CHUYENDIRowChangedEvent) Is Nothing) Then
                RaiseEvent CHUYENDIRowChanged(Me, New CHUYENDIRowChangeEvent(CType(e.Row,CHUYENDIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CHUYENDIRowChangingEvent) Is Nothing) Then
                RaiseEvent CHUYENDIRowChanging(Me, New CHUYENDIRowChangeEvent(CType(e.Row,CHUYENDIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CHUYENDIRowDeletedEvent) Is Nothing) Then
                RaiseEvent CHUYENDIRowDeleted(Me, New CHUYENDIRowChangeEvent(CType(e.Row,CHUYENDIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CHUYENDIRowDeletingEvent) Is Nothing) Then
                RaiseEvent CHUYENDIRowDeleting(Me, New CHUYENDIRowChangeEvent(CType(e.Row,CHUYENDIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCHUYENDIRow(ByVal row As CHUYENDIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CHUYENDIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GHEDataTable
        Inherits Global.System.Data.TypedTableBase(Of GHERow)
        
        Private columnid_Ghe As Global.System.Data.DataColumn
        
        Private columnid_XeBuyt As Global.System.Data.DataColumn
        
        Private columnid_LoaiGhe As Global.System.Data.DataColumn
        
        Private columnso_Ghe As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GHE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_GheColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Ghe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_XeBuytColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_XeBuyt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_LoaiGheColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_LoaiGhe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property so_GheColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnso_Ghe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GHERow
            Get
                Return CType(Me.Rows(index),GHERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GHERowChanging As GHERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GHERowChanged As GHERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GHERowDeleting As GHERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event GHERowDeleted As GHERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddGHERow(ByVal row As GHERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddGHERow(ByVal parentXEBUYTRowByFK__GHE__id_XeBuyt__4D94879B As XEBUYTRow, ByVal parentLOAIGHERowByFK__GHE__id_LoaiGhe__4E88ABD4 As LOAIGHERow, ByVal so_Ghe As String) As GHERow
            Dim rowGHERow As GHERow = CType(Me.NewRow,GHERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, so_Ghe}
            If (Not (parentXEBUYTRowByFK__GHE__id_XeBuyt__4D94879B) Is Nothing) Then
                columnValuesArray(1) = parentXEBUYTRowByFK__GHE__id_XeBuyt__4D94879B(0)
            End If
            If (Not (parentLOAIGHERowByFK__GHE__id_LoaiGhe__4E88ABD4) Is Nothing) Then
                columnValuesArray(2) = parentLOAIGHERowByFK__GHE__id_LoaiGhe__4E88ABD4(0)
            End If
            rowGHERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowGHERow)
            Return rowGHERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_Ghe(ByVal id_Ghe As Integer) As GHERow
            Return CType(Me.Rows.Find(New Object() {id_Ghe}),GHERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As GHEDataTable = CType(MyBase.Clone,GHEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New GHEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_Ghe = MyBase.Columns("id_Ghe")
            Me.columnid_XeBuyt = MyBase.Columns("id_XeBuyt")
            Me.columnid_LoaiGhe = MyBase.Columns("id_LoaiGhe")
            Me.columnso_Ghe = MyBase.Columns("so_Ghe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_Ghe = New Global.System.Data.DataColumn("id_Ghe", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Ghe)
            Me.columnid_XeBuyt = New Global.System.Data.DataColumn("id_XeBuyt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_XeBuyt)
            Me.columnid_LoaiGhe = New Global.System.Data.DataColumn("id_LoaiGhe", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_LoaiGhe)
            Me.columnso_Ghe = New Global.System.Data.DataColumn("so_Ghe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnso_Ghe)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_Ghe}, true))
            Me.columnid_Ghe.AutoIncrement = true
            Me.columnid_Ghe.AutoIncrementSeed = -1
            Me.columnid_Ghe.AutoIncrementStep = -1
            Me.columnid_Ghe.AllowDBNull = false
            Me.columnid_Ghe.ReadOnly = true
            Me.columnid_Ghe.Unique = true
            Me.columnid_XeBuyt.AllowDBNull = false
            Me.columnid_LoaiGhe.AllowDBNull = false
            Me.columnso_Ghe.AllowDBNull = false
            Me.columnso_Ghe.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewGHERow() As GHERow
            Return CType(Me.NewRow,GHERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New GHERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(GHERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GHERowChangedEvent) Is Nothing) Then
                RaiseEvent GHERowChanged(Me, New GHERowChangeEvent(CType(e.Row,GHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GHERowChangingEvent) Is Nothing) Then
                RaiseEvent GHERowChanging(Me, New GHERowChangeEvent(CType(e.Row,GHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GHERowDeletedEvent) Is Nothing) Then
                RaiseEvent GHERowDeleted(Me, New GHERowChangeEvent(CType(e.Row,GHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GHERowDeletingEvent) Is Nothing) Then
                RaiseEvent GHERowDeleting(Me, New GHERowChangeEvent(CType(e.Row,GHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveGHERow(ByVal row As GHERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GHEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LOAIGHEDataTable
        Inherits Global.System.Data.TypedTableBase(Of LOAIGHERow)
        
        Private columnid_LoaiGhe As Global.System.Data.DataColumn
        
        Private columnten_LoaiGhe As Global.System.Data.DataColumn
        
        Private columngia_Ve As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LOAIGHE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_LoaiGheColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_LoaiGhe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ten_LoaiGheColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnten_LoaiGhe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property gia_VeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngia_Ve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LOAIGHERow
            Get
                Return CType(Me.Rows(index),LOAIGHERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOAIGHERowChanging As LOAIGHERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOAIGHERowChanged As LOAIGHERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOAIGHERowDeleting As LOAIGHERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event LOAIGHERowDeleted As LOAIGHERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddLOAIGHERow(ByVal row As LOAIGHERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddLOAIGHERow(ByVal ten_LoaiGhe As String, ByVal gia_Ve As Decimal) As LOAIGHERow
            Dim rowLOAIGHERow As LOAIGHERow = CType(Me.NewRow,LOAIGHERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ten_LoaiGhe, gia_Ve}
            rowLOAIGHERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLOAIGHERow)
            Return rowLOAIGHERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_LoaiGhe(ByVal id_LoaiGhe As Integer) As LOAIGHERow
            Return CType(Me.Rows.Find(New Object() {id_LoaiGhe}),LOAIGHERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LOAIGHEDataTable = CType(MyBase.Clone,LOAIGHEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LOAIGHEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_LoaiGhe = MyBase.Columns("id_LoaiGhe")
            Me.columnten_LoaiGhe = MyBase.Columns("ten_LoaiGhe")
            Me.columngia_Ve = MyBase.Columns("gia_Ve")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_LoaiGhe = New Global.System.Data.DataColumn("id_LoaiGhe", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_LoaiGhe)
            Me.columnten_LoaiGhe = New Global.System.Data.DataColumn("ten_LoaiGhe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnten_LoaiGhe)
            Me.columngia_Ve = New Global.System.Data.DataColumn("gia_Ve", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngia_Ve)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_LoaiGhe}, true))
            Me.columnid_LoaiGhe.AutoIncrement = true
            Me.columnid_LoaiGhe.AutoIncrementSeed = -1
            Me.columnid_LoaiGhe.AutoIncrementStep = -1
            Me.columnid_LoaiGhe.AllowDBNull = false
            Me.columnid_LoaiGhe.ReadOnly = true
            Me.columnid_LoaiGhe.Unique = true
            Me.columnten_LoaiGhe.AllowDBNull = false
            Me.columnten_LoaiGhe.MaxLength = 50
            Me.columngia_Ve.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewLOAIGHERow() As LOAIGHERow
            Return CType(Me.NewRow,LOAIGHERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LOAIGHERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LOAIGHERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LOAIGHERowChangedEvent) Is Nothing) Then
                RaiseEvent LOAIGHERowChanged(Me, New LOAIGHERowChangeEvent(CType(e.Row,LOAIGHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LOAIGHERowChangingEvent) Is Nothing) Then
                RaiseEvent LOAIGHERowChanging(Me, New LOAIGHERowChangeEvent(CType(e.Row,LOAIGHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LOAIGHERowDeletedEvent) Is Nothing) Then
                RaiseEvent LOAIGHERowDeleted(Me, New LOAIGHERowChangeEvent(CType(e.Row,LOAIGHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LOAIGHERowDeletingEvent) Is Nothing) Then
                RaiseEvent LOAIGHERowDeleting(Me, New LOAIGHERowChangeEvent(CType(e.Row,LOAIGHERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveLOAIGHERow(ByVal row As LOAIGHERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LOAIGHEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NGUOIDUNGDataTable
        Inherits Global.System.Data.TypedTableBase(Of NGUOIDUNGRow)
        
        Private columnid_NguoiDung As Global.System.Data.DataColumn
        
        Private columnten_TaiKhoan As Global.System.Data.DataColumn
        
        Private columnho_Ten As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnso_Dien_Thoai As Global.System.Data.DataColumn
        
        Private columnmat_Khau As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NGUOIDUNG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_NguoiDungColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_NguoiDung
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ten_TaiKhoanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnten_TaiKhoan
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ho_TenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnho_Ten
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property so_Dien_ThoaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnso_Dien_Thoai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property mat_KhauColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmat_Khau
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NGUOIDUNGRow
            Get
                Return CType(Me.Rows(index),NGUOIDUNGRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NGUOIDUNGRowChanging As NGUOIDUNGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NGUOIDUNGRowChanged As NGUOIDUNGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NGUOIDUNGRowDeleting As NGUOIDUNGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NGUOIDUNGRowDeleted As NGUOIDUNGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddNGUOIDUNGRow(ByVal row As NGUOIDUNGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddNGUOIDUNGRow(ByVal ten_TaiKhoan As String, ByVal ho_Ten As String, ByVal email As String, ByVal so_Dien_Thoai As String, ByVal mat_Khau As String) As NGUOIDUNGRow
            Dim rowNGUOIDUNGRow As NGUOIDUNGRow = CType(Me.NewRow,NGUOIDUNGRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ten_TaiKhoan, ho_Ten, email, so_Dien_Thoai, mat_Khau}
            rowNGUOIDUNGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNGUOIDUNGRow)
            Return rowNGUOIDUNGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_NguoiDung(ByVal id_NguoiDung As Integer) As NGUOIDUNGRow
            Return CType(Me.Rows.Find(New Object() {id_NguoiDung}),NGUOIDUNGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NGUOIDUNGDataTable = CType(MyBase.Clone,NGUOIDUNGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NGUOIDUNGDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_NguoiDung = MyBase.Columns("id_NguoiDung")
            Me.columnten_TaiKhoan = MyBase.Columns("ten_TaiKhoan")
            Me.columnho_Ten = MyBase.Columns("ho_Ten")
            Me.columnemail = MyBase.Columns("email")
            Me.columnso_Dien_Thoai = MyBase.Columns("so_Dien_Thoai")
            Me.columnmat_Khau = MyBase.Columns("mat_Khau")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_NguoiDung = New Global.System.Data.DataColumn("id_NguoiDung", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_NguoiDung)
            Me.columnten_TaiKhoan = New Global.System.Data.DataColumn("ten_TaiKhoan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnten_TaiKhoan)
            Me.columnho_Ten = New Global.System.Data.DataColumn("ho_Ten", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnho_Ten)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnso_Dien_Thoai = New Global.System.Data.DataColumn("so_Dien_Thoai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnso_Dien_Thoai)
            Me.columnmat_Khau = New Global.System.Data.DataColumn("mat_Khau", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmat_Khau)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_NguoiDung}, true))
            Me.columnid_NguoiDung.AutoIncrement = true
            Me.columnid_NguoiDung.AutoIncrementSeed = -1
            Me.columnid_NguoiDung.AutoIncrementStep = -1
            Me.columnid_NguoiDung.AllowDBNull = false
            Me.columnid_NguoiDung.ReadOnly = true
            Me.columnid_NguoiDung.Unique = true
            Me.columnten_TaiKhoan.AllowDBNull = false
            Me.columnten_TaiKhoan.MaxLength = 50
            Me.columnho_Ten.AllowDBNull = false
            Me.columnho_Ten.MaxLength = 100
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 100
            Me.columnso_Dien_Thoai.MaxLength = 10
            Me.columnmat_Khau.AllowDBNull = false
            Me.columnmat_Khau.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewNGUOIDUNGRow() As NGUOIDUNGRow
            Return CType(Me.NewRow,NGUOIDUNGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NGUOIDUNGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NGUOIDUNGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NGUOIDUNGRowChangedEvent) Is Nothing) Then
                RaiseEvent NGUOIDUNGRowChanged(Me, New NGUOIDUNGRowChangeEvent(CType(e.Row,NGUOIDUNGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NGUOIDUNGRowChangingEvent) Is Nothing) Then
                RaiseEvent NGUOIDUNGRowChanging(Me, New NGUOIDUNGRowChangeEvent(CType(e.Row,NGUOIDUNGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NGUOIDUNGRowDeletedEvent) Is Nothing) Then
                RaiseEvent NGUOIDUNGRowDeleted(Me, New NGUOIDUNGRowChangeEvent(CType(e.Row,NGUOIDUNGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NGUOIDUNGRowDeletingEvent) Is Nothing) Then
                RaiseEvent NGUOIDUNGRowDeleting(Me, New NGUOIDUNGRowChangeEvent(CType(e.Row,NGUOIDUNGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveNGUOIDUNGRow(ByVal row As NGUOIDUNGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NGUOIDUNGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TUYENDUONGDataTable
        Inherits Global.System.Data.TypedTableBase(Of TUYENDUONGRow)
        
        Private columnid_TuyenDuong As Global.System.Data.DataColumn
        
        Private columnid_Ben_XuatPhat As Global.System.Data.DataColumn
        
        Private columnid_Ben_Dich As Global.System.Data.DataColumn
        
        Private columnkhoang_Cach_Km As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TUYENDUONG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_TuyenDuongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_TuyenDuong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_Ben_XuatPhatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Ben_XuatPhat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_Ben_DichColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Ben_Dich
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property khoang_Cach_KmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkhoang_Cach_Km
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TUYENDUONGRow
            Get
                Return CType(Me.Rows(index),TUYENDUONGRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TUYENDUONGRowChanging As TUYENDUONGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TUYENDUONGRowChanged As TUYENDUONGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TUYENDUONGRowDeleting As TUYENDUONGRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event TUYENDUONGRowDeleted As TUYENDUONGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddTUYENDUONGRow(ByVal row As TUYENDUONGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddTUYENDUONGRow(ByVal parentBENXERowByFK__TUYENDUON__id_Be__412EB0B6 As BENXERow, ByVal parentBENXERowByFK__TUYENDUON__id_Be__4222D4EF As BENXERow, ByVal khoang_Cach_Km As Decimal) As TUYENDUONGRow
            Dim rowTUYENDUONGRow As TUYENDUONGRow = CType(Me.NewRow,TUYENDUONGRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, khoang_Cach_Km}
            If (Not (parentBENXERowByFK__TUYENDUON__id_Be__412EB0B6) Is Nothing) Then
                columnValuesArray(1) = parentBENXERowByFK__TUYENDUON__id_Be__412EB0B6(0)
            End If
            If (Not (parentBENXERowByFK__TUYENDUON__id_Be__4222D4EF) Is Nothing) Then
                columnValuesArray(2) = parentBENXERowByFK__TUYENDUON__id_Be__4222D4EF(0)
            End If
            rowTUYENDUONGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTUYENDUONGRow)
            Return rowTUYENDUONGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_TuyenDuong(ByVal id_TuyenDuong As Integer) As TUYENDUONGRow
            Return CType(Me.Rows.Find(New Object() {id_TuyenDuong}),TUYENDUONGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TUYENDUONGDataTable = CType(MyBase.Clone,TUYENDUONGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TUYENDUONGDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_TuyenDuong = MyBase.Columns("id_TuyenDuong")
            Me.columnid_Ben_XuatPhat = MyBase.Columns("id_Ben_XuatPhat")
            Me.columnid_Ben_Dich = MyBase.Columns("id_Ben_Dich")
            Me.columnkhoang_Cach_Km = MyBase.Columns("khoang_Cach_Km")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_TuyenDuong = New Global.System.Data.DataColumn("id_TuyenDuong", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_TuyenDuong)
            Me.columnid_Ben_XuatPhat = New Global.System.Data.DataColumn("id_Ben_XuatPhat", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Ben_XuatPhat)
            Me.columnid_Ben_Dich = New Global.System.Data.DataColumn("id_Ben_Dich", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Ben_Dich)
            Me.columnkhoang_Cach_Km = New Global.System.Data.DataColumn("khoang_Cach_Km", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkhoang_Cach_Km)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_TuyenDuong}, true))
            Me.columnid_TuyenDuong.AutoIncrement = true
            Me.columnid_TuyenDuong.AutoIncrementSeed = -1
            Me.columnid_TuyenDuong.AutoIncrementStep = -1
            Me.columnid_TuyenDuong.AllowDBNull = false
            Me.columnid_TuyenDuong.ReadOnly = true
            Me.columnid_TuyenDuong.Unique = true
            Me.columnid_Ben_XuatPhat.AllowDBNull = false
            Me.columnid_Ben_Dich.AllowDBNull = false
            Me.columnkhoang_Cach_Km.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewTUYENDUONGRow() As TUYENDUONGRow
            Return CType(Me.NewRow,TUYENDUONGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TUYENDUONGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TUYENDUONGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TUYENDUONGRowChangedEvent) Is Nothing) Then
                RaiseEvent TUYENDUONGRowChanged(Me, New TUYENDUONGRowChangeEvent(CType(e.Row,TUYENDUONGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TUYENDUONGRowChangingEvent) Is Nothing) Then
                RaiseEvent TUYENDUONGRowChanging(Me, New TUYENDUONGRowChangeEvent(CType(e.Row,TUYENDUONGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TUYENDUONGRowDeletedEvent) Is Nothing) Then
                RaiseEvent TUYENDUONGRowDeleted(Me, New TUYENDUONGRowChangeEvent(CType(e.Row,TUYENDUONGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TUYENDUONGRowDeletingEvent) Is Nothing) Then
                RaiseEvent TUYENDUONGRowDeleting(Me, New TUYENDUONGRowChangeEvent(CType(e.Row,TUYENDUONGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveTUYENDUONGRow(ByVal row As TUYENDUONGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TUYENDUONGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VEDataTable
        Inherits Global.System.Data.TypedTableBase(Of VERow)
        
        Private columnid_Ve As Global.System.Data.DataColumn
        
        Private columnid_ChuyenDi As Global.System.Data.DataColumn
        
        Private columnid_NguoiDung As Global.System.Data.DataColumn
        
        Private columnid_Ghe As Global.System.Data.DataColumn
        
        Private columnngay_Dat As Global.System.Data.DataColumn
        
        Private columntrang_Thai As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_VeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Ve
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_ChuyenDiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_ChuyenDi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_NguoiDungColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_NguoiDung
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_GheColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Ghe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ngay_DatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnngay_Dat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property trang_ThaiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrang_Thai
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VERow
            Get
                Return CType(Me.Rows(index),VERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VERowChanging As VERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VERowChanged As VERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VERowDeleting As VERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event VERowDeleted As VERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddVERow(ByVal row As VERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddVERow(ByVal parentCHUYENDIRowByFK__VE__id_ChuyenDi__5441852A As CHUYENDIRow, ByVal parentNGUOIDUNGRowByFK__VE__id_NguoiDung__5535A963 As NGUOIDUNGRow, ByVal parentGHERowByFK__VE__id_Ghe__5629CD9C As GHERow, ByVal ngay_Dat As Date, ByVal trang_Thai As String) As VERow
            Dim rowVERow As VERow = CType(Me.NewRow,VERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Nothing, ngay_Dat, trang_Thai}
            If (Not (parentCHUYENDIRowByFK__VE__id_ChuyenDi__5441852A) Is Nothing) Then
                columnValuesArray(1) = parentCHUYENDIRowByFK__VE__id_ChuyenDi__5441852A(0)
            End If
            If (Not (parentNGUOIDUNGRowByFK__VE__id_NguoiDung__5535A963) Is Nothing) Then
                columnValuesArray(2) = parentNGUOIDUNGRowByFK__VE__id_NguoiDung__5535A963(0)
            End If
            If (Not (parentGHERowByFK__VE__id_Ghe__5629CD9C) Is Nothing) Then
                columnValuesArray(3) = parentGHERowByFK__VE__id_Ghe__5629CD9C(0)
            End If
            rowVERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVERow)
            Return rowVERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_Ve(ByVal id_Ve As Integer) As VERow
            Return CType(Me.Rows.Find(New Object() {id_Ve}),VERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VEDataTable = CType(MyBase.Clone,VEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_Ve = MyBase.Columns("id_Ve")
            Me.columnid_ChuyenDi = MyBase.Columns("id_ChuyenDi")
            Me.columnid_NguoiDung = MyBase.Columns("id_NguoiDung")
            Me.columnid_Ghe = MyBase.Columns("id_Ghe")
            Me.columnngay_Dat = MyBase.Columns("ngay_Dat")
            Me.columntrang_Thai = MyBase.Columns("trang_Thai")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_Ve = New Global.System.Data.DataColumn("id_Ve", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Ve)
            Me.columnid_ChuyenDi = New Global.System.Data.DataColumn("id_ChuyenDi", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_ChuyenDi)
            Me.columnid_NguoiDung = New Global.System.Data.DataColumn("id_NguoiDung", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_NguoiDung)
            Me.columnid_Ghe = New Global.System.Data.DataColumn("id_Ghe", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Ghe)
            Me.columnngay_Dat = New Global.System.Data.DataColumn("ngay_Dat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnngay_Dat)
            Me.columntrang_Thai = New Global.System.Data.DataColumn("trang_Thai", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrang_Thai)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_Ve}, true))
            Me.columnid_Ve.AutoIncrement = true
            Me.columnid_Ve.AutoIncrementSeed = -1
            Me.columnid_Ve.AutoIncrementStep = -1
            Me.columnid_Ve.AllowDBNull = false
            Me.columnid_Ve.ReadOnly = true
            Me.columnid_Ve.Unique = true
            Me.columnid_ChuyenDi.AllowDBNull = false
            Me.columnid_NguoiDung.AllowDBNull = false
            Me.columnid_Ghe.AllowDBNull = false
            Me.columntrang_Thai.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewVERow() As VERow
            Return CType(Me.NewRow,VERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VERowChangedEvent) Is Nothing) Then
                RaiseEvent VERowChanged(Me, New VERowChangeEvent(CType(e.Row,VERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VERowChangingEvent) Is Nothing) Then
                RaiseEvent VERowChanging(Me, New VERowChangeEvent(CType(e.Row,VERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VERowDeletedEvent) Is Nothing) Then
                RaiseEvent VERowDeleted(Me, New VERowChangeEvent(CType(e.Row,VERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VERowDeletingEvent) Is Nothing) Then
                RaiseEvent VERowDeleting(Me, New VERowChangeEvent(CType(e.Row,VERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveVERow(ByVal row As VERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class XEBUYTDataTable
        Inherits Global.System.Data.TypedTableBase(Of XEBUYTRow)
        
        Private columnid_XeBuyt As Global.System.Data.DataColumn
        
        Private columnbien_So As Global.System.Data.DataColumn
        
        Private columnten_XeBuyt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "XEBUYT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property id_XeBuytColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_XeBuyt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property bien_SoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbien_So
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ten_XeBuytColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnten_XeBuyt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As XEBUYTRow
            Get
                Return CType(Me.Rows(index),XEBUYTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event XEBUYTRowChanging As XEBUYTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event XEBUYTRowChanged As XEBUYTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event XEBUYTRowDeleting As XEBUYTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event XEBUYTRowDeleted As XEBUYTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddXEBUYTRow(ByVal row As XEBUYTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddXEBUYTRow(ByVal bien_So As String, ByVal ten_XeBuyt As String) As XEBUYTRow
            Dim rowXEBUYTRow As XEBUYTRow = CType(Me.NewRow,XEBUYTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, bien_So, ten_XeBuyt}
            rowXEBUYTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowXEBUYTRow)
            Return rowXEBUYTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function FindByid_XeBuyt(ByVal id_XeBuyt As Integer) As XEBUYTRow
            Return CType(Me.Rows.Find(New Object() {id_XeBuyt}),XEBUYTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As XEBUYTDataTable = CType(MyBase.Clone,XEBUYTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New XEBUYTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_XeBuyt = MyBase.Columns("id_XeBuyt")
            Me.columnbien_So = MyBase.Columns("bien_So")
            Me.columnten_XeBuyt = MyBase.Columns("ten_XeBuyt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_XeBuyt = New Global.System.Data.DataColumn("id_XeBuyt", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_XeBuyt)
            Me.columnbien_So = New Global.System.Data.DataColumn("bien_So", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbien_So)
            Me.columnten_XeBuyt = New Global.System.Data.DataColumn("ten_XeBuyt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnten_XeBuyt)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_XeBuyt}, true))
            Me.columnid_XeBuyt.AutoIncrement = true
            Me.columnid_XeBuyt.AutoIncrementSeed = -1
            Me.columnid_XeBuyt.AutoIncrementStep = -1
            Me.columnid_XeBuyt.AllowDBNull = false
            Me.columnid_XeBuyt.ReadOnly = true
            Me.columnid_XeBuyt.Unique = true
            Me.columnbien_So.AllowDBNull = false
            Me.columnbien_So.MaxLength = 20
            Me.columnten_XeBuyt.AllowDBNull = false
            Me.columnten_XeBuyt.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewXEBUYTRow() As XEBUYTRow
            Return CType(Me.NewRow,XEBUYTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New XEBUYTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(XEBUYTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.XEBUYTRowChangedEvent) Is Nothing) Then
                RaiseEvent XEBUYTRowChanged(Me, New XEBUYTRowChangeEvent(CType(e.Row,XEBUYTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.XEBUYTRowChangingEvent) Is Nothing) Then
                RaiseEvent XEBUYTRowChanging(Me, New XEBUYTRowChangeEvent(CType(e.Row,XEBUYTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.XEBUYTRowDeletedEvent) Is Nothing) Then
                RaiseEvent XEBUYTRowDeleted(Me, New XEBUYTRowChangeEvent(CType(e.Row,XEBUYTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.XEBUYTRowDeletingEvent) Is Nothing) Then
                RaiseEvent XEBUYTRowDeleting(Me, New XEBUYTRowChangeEvent(CType(e.Row,XEBUYTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveXEBUYTRow(ByVal row As XEBUYTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dbQuanLyVeKhachDataSet1 = New dbQuanLyVeKhachDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "XEBUYTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BENXERow
        Inherits Global.System.Data.DataRow
        
        Private tableBENXE As BENXEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBENXE = CType(Me.Table,BENXEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_BenXe() As Integer
            Get
                Return CType(Me(Me.tableBENXE.id_BenXeColumn),Integer)
            End Get
            Set
                Me(Me.tableBENXE.id_BenXeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ten_BenXe() As String
            Get
                Return CType(Me(Me.tableBENXE.ten_BenXeColumn),String)
            End Get
            Set
                Me(Me.tableBENXE.ten_BenXeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property dia_Diem() As String
            Get
                Try 
                    Return CType(Me(Me.tableBENXE.dia_DiemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'dia_Diem' in table 'BENXE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBENXE.dia_DiemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isdia_DiemNull() As Boolean
            Return Me.IsNull(Me.tableBENXE.dia_DiemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setdia_DiemNull()
            Me(Me.tableBENXE.dia_DiemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetTUYENDUONGRowsByFK__TUYENDUON__id_Be__412EB0B6() As TUYENDUONGRow()
            If (Me.Table.ChildRelations("FK__TUYENDUON__id_Be__412EB0B6") Is Nothing) Then
                Return New TUYENDUONGRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__TUYENDUON__id_Be__412EB0B6")),TUYENDUONGRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetTUYENDUONGRowsByFK__TUYENDUON__id_Be__4222D4EF() As TUYENDUONGRow()
            If (Me.Table.ChildRelations("FK__TUYENDUON__id_Be__4222D4EF") Is Nothing) Then
                Return New TUYENDUONGRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__TUYENDUON__id_Be__4222D4EF")),TUYENDUONGRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CHUYENDIRow
        Inherits Global.System.Data.DataRow
        
        Private tableCHUYENDI As CHUYENDIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCHUYENDI = CType(Me.Table,CHUYENDIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_ChuyenDi() As Integer
            Get
                Return CType(Me(Me.tableCHUYENDI.id_ChuyenDiColumn),Integer)
            End Get
            Set
                Me(Me.tableCHUYENDI.id_ChuyenDiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_TuyenDuong() As Integer
            Get
                Return CType(Me(Me.tableCHUYENDI.id_TuyenDuongColumn),Integer)
            End Get
            Set
                Me(Me.tableCHUYENDI.id_TuyenDuongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_XeBuyt() As Integer
            Get
                Return CType(Me(Me.tableCHUYENDI.id_XeBuytColumn),Integer)
            End Get
            Set
                Me(Me.tableCHUYENDI.id_XeBuytColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property gio_Di() As Date
            Get
                Return CType(Me(Me.tableCHUYENDI.gio_DiColumn),Date)
            End Get
            Set
                Me(Me.tableCHUYENDI.gio_DiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property gio_Den() As Date
            Get
                Return CType(Me(Me.tableCHUYENDI.gio_DenColumn),Date)
            End Get
            Set
                Me(Me.tableCHUYENDI.gio_DenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property TUYENDUONGRow() As TUYENDUONGRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__CHUYENDI__id_Tuy__44FF419A")),TUYENDUONGRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__CHUYENDI__id_Tuy__44FF419A"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property XEBUYTRow() As XEBUYTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__CHUYENDI__id_XeB__45F365D3")),XEBUYTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__CHUYENDI__id_XeB__45F365D3"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetVERows() As VERow()
            If (Me.Table.ChildRelations("FK__VE__id_ChuyenDi__5441852A") Is Nothing) Then
                Return New VERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__VE__id_ChuyenDi__5441852A")),VERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class GHERow
        Inherits Global.System.Data.DataRow
        
        Private tableGHE As GHEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGHE = CType(Me.Table,GHEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_Ghe() As Integer
            Get
                Return CType(Me(Me.tableGHE.id_GheColumn),Integer)
            End Get
            Set
                Me(Me.tableGHE.id_GheColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_XeBuyt() As Integer
            Get
                Return CType(Me(Me.tableGHE.id_XeBuytColumn),Integer)
            End Get
            Set
                Me(Me.tableGHE.id_XeBuytColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_LoaiGhe() As Integer
            Get
                Return CType(Me(Me.tableGHE.id_LoaiGheColumn),Integer)
            End Get
            Set
                Me(Me.tableGHE.id_LoaiGheColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property so_Ghe() As String
            Get
                Return CType(Me(Me.tableGHE.so_GheColumn),String)
            End Get
            Set
                Me(Me.tableGHE.so_GheColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property LOAIGHERow() As LOAIGHERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__GHE__id_LoaiGhe__4E88ABD4")),LOAIGHERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__GHE__id_LoaiGhe__4E88ABD4"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property XEBUYTRow() As XEBUYTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__GHE__id_XeBuyt__4D94879B")),XEBUYTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__GHE__id_XeBuyt__4D94879B"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetVERows() As VERow()
            If (Me.Table.ChildRelations("FK__VE__id_Ghe__5629CD9C") Is Nothing) Then
                Return New VERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__VE__id_Ghe__5629CD9C")),VERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LOAIGHERow
        Inherits Global.System.Data.DataRow
        
        Private tableLOAIGHE As LOAIGHEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLOAIGHE = CType(Me.Table,LOAIGHEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_LoaiGhe() As Integer
            Get
                Return CType(Me(Me.tableLOAIGHE.id_LoaiGheColumn),Integer)
            End Get
            Set
                Me(Me.tableLOAIGHE.id_LoaiGheColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ten_LoaiGhe() As String
            Get
                Return CType(Me(Me.tableLOAIGHE.ten_LoaiGheColumn),String)
            End Get
            Set
                Me(Me.tableLOAIGHE.ten_LoaiGheColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property gia_Ve() As Decimal
            Get
                Return CType(Me(Me.tableLOAIGHE.gia_VeColumn),Decimal)
            End Get
            Set
                Me(Me.tableLOAIGHE.gia_VeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetGHERows() As GHERow()
            If (Me.Table.ChildRelations("FK__GHE__id_LoaiGhe__4E88ABD4") Is Nothing) Then
                Return New GHERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__GHE__id_LoaiGhe__4E88ABD4")),GHERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class NGUOIDUNGRow
        Inherits Global.System.Data.DataRow
        
        Private tableNGUOIDUNG As NGUOIDUNGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNGUOIDUNG = CType(Me.Table,NGUOIDUNGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_NguoiDung() As Integer
            Get
                Return CType(Me(Me.tableNGUOIDUNG.id_NguoiDungColumn),Integer)
            End Get
            Set
                Me(Me.tableNGUOIDUNG.id_NguoiDungColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ten_TaiKhoan() As String
            Get
                Return CType(Me(Me.tableNGUOIDUNG.ten_TaiKhoanColumn),String)
            End Get
            Set
                Me(Me.tableNGUOIDUNG.ten_TaiKhoanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ho_Ten() As String
            Get
                Return CType(Me(Me.tableNGUOIDUNG.ho_TenColumn),String)
            End Get
            Set
                Me(Me.tableNGUOIDUNG.ho_TenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableNGUOIDUNG.emailColumn),String)
            End Get
            Set
                Me(Me.tableNGUOIDUNG.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property so_Dien_Thoai() As String
            Get
                Try 
                    Return CType(Me(Me.tableNGUOIDUNG.so_Dien_ThoaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'so_Dien_Thoai' in table 'NGUOIDUNG' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNGUOIDUNG.so_Dien_ThoaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property mat_Khau() As String
            Get
                Return CType(Me(Me.tableNGUOIDUNG.mat_KhauColumn),String)
            End Get
            Set
                Me(Me.tableNGUOIDUNG.mat_KhauColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isso_Dien_ThoaiNull() As Boolean
            Return Me.IsNull(Me.tableNGUOIDUNG.so_Dien_ThoaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setso_Dien_ThoaiNull()
            Me(Me.tableNGUOIDUNG.so_Dien_ThoaiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetVERows() As VERow()
            If (Me.Table.ChildRelations("FK__VE__id_NguoiDung__5535A963") Is Nothing) Then
                Return New VERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__VE__id_NguoiDung__5535A963")),VERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TUYENDUONGRow
        Inherits Global.System.Data.DataRow
        
        Private tableTUYENDUONG As TUYENDUONGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTUYENDUONG = CType(Me.Table,TUYENDUONGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_TuyenDuong() As Integer
            Get
                Return CType(Me(Me.tableTUYENDUONG.id_TuyenDuongColumn),Integer)
            End Get
            Set
                Me(Me.tableTUYENDUONG.id_TuyenDuongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_Ben_XuatPhat() As Integer
            Get
                Return CType(Me(Me.tableTUYENDUONG.id_Ben_XuatPhatColumn),Integer)
            End Get
            Set
                Me(Me.tableTUYENDUONG.id_Ben_XuatPhatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_Ben_Dich() As Integer
            Get
                Return CType(Me(Me.tableTUYENDUONG.id_Ben_DichColumn),Integer)
            End Get
            Set
                Me(Me.tableTUYENDUONG.id_Ben_DichColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property khoang_Cach_Km() As Decimal
            Get
                Return CType(Me(Me.tableTUYENDUONG.khoang_Cach_KmColumn),Decimal)
            End Get
            Set
                Me(Me.tableTUYENDUONG.khoang_Cach_KmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BENXERowByFK__TUYENDUON__id_Be__412EB0B6() As BENXERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__TUYENDUON__id_Be__412EB0B6")),BENXERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__TUYENDUON__id_Be__412EB0B6"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BENXERowByFK__TUYENDUON__id_Be__4222D4EF() As BENXERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__TUYENDUON__id_Be__4222D4EF")),BENXERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__TUYENDUON__id_Be__4222D4EF"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetCHUYENDIRows() As CHUYENDIRow()
            If (Me.Table.ChildRelations("FK__CHUYENDI__id_Tuy__44FF419A") Is Nothing) Then
                Return New CHUYENDIRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__CHUYENDI__id_Tuy__44FF419A")),CHUYENDIRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VERow
        Inherits Global.System.Data.DataRow
        
        Private tableVE As VEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVE = CType(Me.Table,VEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_Ve() As Integer
            Get
                Return CType(Me(Me.tableVE.id_VeColumn),Integer)
            End Get
            Set
                Me(Me.tableVE.id_VeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_ChuyenDi() As Integer
            Get
                Return CType(Me(Me.tableVE.id_ChuyenDiColumn),Integer)
            End Get
            Set
                Me(Me.tableVE.id_ChuyenDiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_NguoiDung() As Integer
            Get
                Return CType(Me(Me.tableVE.id_NguoiDungColumn),Integer)
            End Get
            Set
                Me(Me.tableVE.id_NguoiDungColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_Ghe() As Integer
            Get
                Return CType(Me(Me.tableVE.id_GheColumn),Integer)
            End Get
            Set
                Me(Me.tableVE.id_GheColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ngay_Dat() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVE.ngay_DatColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ngay_Dat' in table 'VE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVE.ngay_DatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property trang_Thai() As String
            Get
                Try 
                    Return CType(Me(Me.tableVE.trang_ThaiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'trang_Thai' in table 'VE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVE.trang_ThaiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property CHUYENDIRow() As CHUYENDIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__VE__id_ChuyenDi__5441852A")),CHUYENDIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__VE__id_ChuyenDi__5441852A"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property GHERow() As GHERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__VE__id_Ghe__5629CD9C")),GHERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__VE__id_Ghe__5629CD9C"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property NGUOIDUNGRow() As NGUOIDUNGRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK__VE__id_NguoiDung__5535A963")),NGUOIDUNGRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK__VE__id_NguoiDung__5535A963"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Isngay_DatNull() As Boolean
            Return Me.IsNull(Me.tableVE.ngay_DatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Setngay_DatNull()
            Me(Me.tableVE.ngay_DatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function Istrang_ThaiNull() As Boolean
            Return Me.IsNull(Me.tableVE.trang_ThaiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub Settrang_ThaiNull()
            Me(Me.tableVE.trang_ThaiColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class XEBUYTRow
        Inherits Global.System.Data.DataRow
        
        Private tableXEBUYT As XEBUYTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableXEBUYT = CType(Me.Table,XEBUYTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property id_XeBuyt() As Integer
            Get
                Return CType(Me(Me.tableXEBUYT.id_XeBuytColumn),Integer)
            End Get
            Set
                Me(Me.tableXEBUYT.id_XeBuytColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property bien_So() As String
            Get
                Return CType(Me(Me.tableXEBUYT.bien_SoColumn),String)
            End Get
            Set
                Me(Me.tableXEBUYT.bien_SoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ten_XeBuyt() As String
            Get
                Return CType(Me(Me.tableXEBUYT.ten_XeBuytColumn),String)
            End Get
            Set
                Me(Me.tableXEBUYT.ten_XeBuytColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetCHUYENDIRows() As CHUYENDIRow()
            If (Me.Table.ChildRelations("FK__CHUYENDI__id_XeB__45F365D3") Is Nothing) Then
                Return New CHUYENDIRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__CHUYENDI__id_XeB__45F365D3")),CHUYENDIRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function GetGHERows() As GHERow()
            If (Me.Table.ChildRelations("FK__GHE__id_XeBuyt__4D94879B") Is Nothing) Then
                Return New GHERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK__GHE__id_XeBuyt__4D94879B")),GHERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class BENXERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BENXERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As BENXERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As BENXERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CHUYENDIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CHUYENDIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CHUYENDIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CHUYENDIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class GHERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GHERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As GHERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As GHERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class LOAIGHERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LOAIGHERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As LOAIGHERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As LOAIGHERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class NGUOIDUNGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NGUOIDUNGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As NGUOIDUNGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As NGUOIDUNGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class TUYENDUONGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TUYENDUONGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As TUYENDUONGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As TUYENDUONGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class VERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As VERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As VERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class XEBUYTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As XEBUYTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As XEBUYTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As XEBUYTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dbQuanLyVeKhachDataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BENXETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BENXE"
            tableMapping.ColumnMappings.Add("id_BenXe", "id_BenXe")
            tableMapping.ColumnMappings.Add("ten_BenXe", "ten_BenXe")
            tableMapping.ColumnMappings.Add("dia_Diem", "dia_Diem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[BENXE] WHERE (([id_BenXe] = @Original_id_BenXe) AND ([ten_BenX"& _ 
                "e] = @Original_ten_BenXe) AND ((@IsNull_dia_Diem = 1 AND [dia_Diem] IS NULL) OR "& _ 
                "([dia_Diem] = @Original_dia_Diem)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_BenXe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_BenXe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_BenXe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_BenXe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_dia_Diem"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "dia_Diem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_dia_Diem"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "dia_Diem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BENXE] ([ten_BenXe], [dia_Diem]) VALUES (@ten_BenXe, @dia_Diem"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_BenXe, ten_BenXe, dia_Diem FROM BENXE WHERE (id_BenXe = SCOPE_IDEN"& _ 
                "TITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_BenXe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_BenXe"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@dia_Diem"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "dia_Diem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[BENXE] SET [ten_BenXe] = @ten_BenXe, [dia_Diem] = @dia_Diem WHERE ("& _ 
                "([id_BenXe] = @Original_id_BenXe) AND ([ten_BenXe] = @Original_ten_BenXe) AND (("& _ 
                "@IsNull_dia_Diem = 1 AND [dia_Diem] IS NULL) OR ([dia_Diem] = @Original_dia_Diem"& _ 
                ")));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_BenXe, ten_BenXe, dia_Diem FROM BENXE WHERE (id_BenXe = @id_BenX"& _ 
                "e)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_BenXe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_BenXe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@dia_Diem"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "dia_Diem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_BenXe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_BenXe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_BenXe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_BenXe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_dia_Diem"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "dia_Diem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_dia_Diem"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "dia_Diem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_BenXe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_BenXe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_BenXe, ten_BenXe, dia_Diem FROM dbo.BENXE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.BENXEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.BENXEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.BENXEDataTable = New dbQuanLyVeKhachDataSet1.BENXEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.BENXEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "BENXE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_BenXe As Integer, ByVal Original_ten_BenXe As String, ByVal Original_dia_Diem As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_BenXe,Integer)
            If (Original_ten_BenXe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_BenXe")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ten_BenXe,String)
            End If
            If (Original_dia_Diem Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_dia_Diem,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ten_BenXe As String, ByVal dia_Diem As String) As Integer
            If (ten_BenXe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_BenXe")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ten_BenXe,String)
            End If
            If (dia_Diem Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(dia_Diem,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ten_BenXe As String, ByVal dia_Diem As String, ByVal Original_id_BenXe As Integer, ByVal Original_ten_BenXe As String, ByVal Original_dia_Diem As String, ByVal id_BenXe As Integer) As Integer
            If (ten_BenXe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_BenXe")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ten_BenXe,String)
            End If
            If (dia_Diem Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dia_Diem,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id_BenXe,Integer)
            If (Original_ten_BenXe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_BenXe")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ten_BenXe,String)
            End If
            If (Original_dia_Diem Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_dia_Diem,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(id_BenXe,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ten_BenXe As String, ByVal dia_Diem As String, ByVal Original_id_BenXe As Integer, ByVal Original_ten_BenXe As String, ByVal Original_dia_Diem As String) As Integer
            Return Me.Update(ten_BenXe, dia_Diem, Original_id_BenXe, Original_ten_BenXe, Original_dia_Diem, Original_id_BenXe)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CHUYENDITableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CHUYENDI"
            tableMapping.ColumnMappings.Add("id_ChuyenDi", "id_ChuyenDi")
            tableMapping.ColumnMappings.Add("id_TuyenDuong", "id_TuyenDuong")
            tableMapping.ColumnMappings.Add("id_XeBuyt", "id_XeBuyt")
            tableMapping.ColumnMappings.Add("gio_Di", "gio_Di")
            tableMapping.ColumnMappings.Add("gio_Den", "gio_Den")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CHUYENDI] WHERE (([id_ChuyenDi] = @Original_id_ChuyenDi) AND ("& _ 
                "[id_TuyenDuong] = @Original_id_TuyenDuong) AND ([id_XeBuyt] = @Original_id_XeBuy"& _ 
                "t) AND ([gio_Di] = @Original_gio_Di) AND ([gio_Den] = @Original_gio_Den))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_ChuyenDi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_ChuyenDi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_TuyenDuong"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_TuyenDuong"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_gio_Di"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Di"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_gio_Den"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Den"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CHUYENDI] ([id_TuyenDuong], [id_XeBuyt], [gio_Di], [gio_Den]) "& _ 
                "VALUES (@id_TuyenDuong, @id_XeBuyt, @gio_Di, @gio_Den);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_ChuyenDi, id_"& _ 
                "TuyenDuong, id_XeBuyt, gio_Di, gio_Den FROM CHUYENDI WHERE (id_ChuyenDi = SCOPE_"& _ 
                "IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_TuyenDuong"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_TuyenDuong"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@gio_Di"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Di"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@gio_Den"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Den"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CHUYENDI] SET [id_TuyenDuong] = @id_TuyenDuong, [id_XeBuyt] = @id_X"& _ 
                "eBuyt, [gio_Di] = @gio_Di, [gio_Den] = @gio_Den WHERE (([id_ChuyenDi] = @Origina"& _ 
                "l_id_ChuyenDi) AND ([id_TuyenDuong] = @Original_id_TuyenDuong) AND ([id_XeBuyt] "& _ 
                "= @Original_id_XeBuyt) AND ([gio_Di] = @Original_gio_Di) AND ([gio_Den] = @Origi"& _ 
                "nal_gio_Den));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_ChuyenDi, id_TuyenDuong, id_XeBuyt, gio_Di, gio_Den FR"& _ 
                "OM CHUYENDI WHERE (id_ChuyenDi = @id_ChuyenDi)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_TuyenDuong"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_TuyenDuong"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@gio_Di"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Di"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@gio_Den"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Den"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_ChuyenDi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_ChuyenDi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_TuyenDuong"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_TuyenDuong"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_gio_Di"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Di"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_gio_Den"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "gio_Den"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_ChuyenDi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_ChuyenDi"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_ChuyenDi, id_TuyenDuong, id_XeBuyt, gio_Di, gio_Den FROM dbo.CHUYENDI"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.CHUYENDIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.CHUYENDIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.CHUYENDIDataTable = New dbQuanLyVeKhachDataSet1.CHUYENDIDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.CHUYENDIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "CHUYENDI")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_ChuyenDi As Integer, ByVal Original_id_TuyenDuong As Integer, ByVal Original_id_XeBuyt As Integer, ByVal Original_gio_Di As Date, ByVal Original_gio_Den As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_ChuyenDi,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_id_TuyenDuong,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_XeBuyt,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_gio_Di,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_gio_Den,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_TuyenDuong As Integer, ByVal id_XeBuyt As Integer, ByVal gio_Di As Date, ByVal gio_Den As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_TuyenDuong,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_XeBuyt,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(gio_Di,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(gio_Den,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_TuyenDuong As Integer, ByVal id_XeBuyt As Integer, ByVal gio_Di As Date, ByVal gio_Den As Date, ByVal Original_id_ChuyenDi As Integer, ByVal Original_id_TuyenDuong As Integer, ByVal Original_id_XeBuyt As Integer, ByVal Original_gio_Di As Date, ByVal Original_gio_Den As Date, ByVal id_ChuyenDi As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_TuyenDuong,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_XeBuyt,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(gio_Di,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(gio_Den,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id_ChuyenDi,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_id_TuyenDuong,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id_XeBuyt,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_gio_Di,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_gio_Den,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(id_ChuyenDi,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_TuyenDuong As Integer, ByVal id_XeBuyt As Integer, ByVal gio_Di As Date, ByVal gio_Den As Date, ByVal Original_id_ChuyenDi As Integer, ByVal Original_id_TuyenDuong As Integer, ByVal Original_id_XeBuyt As Integer, ByVal Original_gio_Di As Date, ByVal Original_gio_Den As Date) As Integer
            Return Me.Update(id_TuyenDuong, id_XeBuyt, gio_Di, gio_Den, Original_id_ChuyenDi, Original_id_TuyenDuong, Original_id_XeBuyt, Original_gio_Di, Original_gio_Den, Original_id_ChuyenDi)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GHETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GHE"
            tableMapping.ColumnMappings.Add("id_Ghe", "id_Ghe")
            tableMapping.ColumnMappings.Add("id_XeBuyt", "id_XeBuyt")
            tableMapping.ColumnMappings.Add("id_LoaiGhe", "id_LoaiGhe")
            tableMapping.ColumnMappings.Add("so_Ghe", "so_Ghe")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[GHE] WHERE (([id_Ghe] = @Original_id_Ghe) AND ([id_XeBuyt] = @"& _ 
                "Original_id_XeBuyt) AND ([id_LoaiGhe] = @Original_id_LoaiGhe) AND ([so_Ghe] = @O"& _ 
                "riginal_so_Ghe))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ghe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ghe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_LoaiGhe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_LoaiGhe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_so_Ghe"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "so_Ghe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[GHE] ([id_XeBuyt], [id_LoaiGhe], [so_Ghe]) VALUES (@id_XeBuyt,"& _ 
                " @id_LoaiGhe, @so_Ghe);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_Ghe, id_XeBuyt, id_LoaiGhe, so_Ghe FROM GHE W"& _ 
                "HERE (id_Ghe = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_LoaiGhe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_LoaiGhe"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@so_Ghe"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "so_Ghe"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[GHE] SET [id_XeBuyt] = @id_XeBuyt, [id_LoaiGhe] = @id_LoaiGhe, [so_"& _ 
                "Ghe] = @so_Ghe WHERE (([id_Ghe] = @Original_id_Ghe) AND ([id_XeBuyt] = @Original"& _ 
                "_id_XeBuyt) AND ([id_LoaiGhe] = @Original_id_LoaiGhe) AND ([so_Ghe] = @Original_"& _ 
                "so_Ghe));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_Ghe, id_XeBuyt, id_LoaiGhe, so_Ghe FROM GHE WHERE (id_Ghe ="& _ 
                " @id_Ghe)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_LoaiGhe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_LoaiGhe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@so_Ghe"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "so_Ghe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ghe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ghe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_LoaiGhe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_LoaiGhe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_so_Ghe"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "so_Ghe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ghe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_Ghe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_Ghe, id_XeBuyt, id_LoaiGhe, so_Ghe FROM dbo.GHE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.GHEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.GHEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.GHEDataTable = New dbQuanLyVeKhachDataSet1.GHEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.GHEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "GHE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_Ghe As Integer, ByVal Original_id_XeBuyt As Integer, ByVal Original_id_LoaiGhe As Integer, ByVal Original_so_Ghe As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_Ghe,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_id_XeBuyt,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_LoaiGhe,Integer)
            If (Original_so_Ghe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_so_Ghe")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_so_Ghe,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_XeBuyt As Integer, ByVal id_LoaiGhe As Integer, ByVal so_Ghe As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_XeBuyt,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_LoaiGhe,Integer)
            If (so_Ghe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("so_Ghe")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(so_Ghe,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_XeBuyt As Integer, ByVal id_LoaiGhe As Integer, ByVal so_Ghe As String, ByVal Original_id_Ghe As Integer, ByVal Original_id_XeBuyt As Integer, ByVal Original_id_LoaiGhe As Integer, ByVal Original_so_Ghe As String, ByVal id_Ghe As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_XeBuyt,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_LoaiGhe,Integer)
            If (so_Ghe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("so_Ghe")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(so_Ghe,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_id_Ghe,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id_XeBuyt,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_id_LoaiGhe,Integer)
            If (Original_so_Ghe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_so_Ghe")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_so_Ghe,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(id_Ghe,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_XeBuyt As Integer, ByVal id_LoaiGhe As Integer, ByVal so_Ghe As String, ByVal Original_id_Ghe As Integer, ByVal Original_id_XeBuyt As Integer, ByVal Original_id_LoaiGhe As Integer, ByVal Original_so_Ghe As String) As Integer
            Return Me.Update(id_XeBuyt, id_LoaiGhe, so_Ghe, Original_id_Ghe, Original_id_XeBuyt, Original_id_LoaiGhe, Original_so_Ghe, Original_id_Ghe)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LOAIGHETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LOAIGHE"
            tableMapping.ColumnMappings.Add("id_LoaiGhe", "id_LoaiGhe")
            tableMapping.ColumnMappings.Add("ten_LoaiGhe", "ten_LoaiGhe")
            tableMapping.ColumnMappings.Add("gia_Ve", "gia_Ve")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LOAIGHE] WHERE (([id_LoaiGhe] = @Original_id_LoaiGhe) AND ([te"& _ 
                "n_LoaiGhe] = @Original_ten_LoaiGhe) AND ([gia_Ve] = @Original_gia_Ve))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_LoaiGhe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_LoaiGhe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_LoaiGhe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_LoaiGhe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_gia_Ve"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "gia_Ve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LOAIGHE] ([ten_LoaiGhe], [gia_Ve]) VALUES (@ten_LoaiGhe, @gia_"& _ 
                "Ve);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_LoaiGhe, ten_LoaiGhe, gia_Ve FROM LOAIGHE WHERE (id_LoaiGhe = SC"& _ 
                "OPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_LoaiGhe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_LoaiGhe"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@gia_Ve"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "gia_Ve"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LOAIGHE] SET [ten_LoaiGhe] = @ten_LoaiGhe, [gia_Ve] = @gia_Ve WHERE"& _ 
                " (([id_LoaiGhe] = @Original_id_LoaiGhe) AND ([ten_LoaiGhe] = @Original_ten_LoaiG"& _ 
                "he) AND ([gia_Ve] = @Original_gia_Ve));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_LoaiGhe, ten_LoaiGhe, gia_Ve "& _ 
                "FROM LOAIGHE WHERE (id_LoaiGhe = @id_LoaiGhe)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_LoaiGhe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_LoaiGhe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@gia_Ve"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "gia_Ve"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_LoaiGhe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_LoaiGhe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_LoaiGhe"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_LoaiGhe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_gia_Ve"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "gia_Ve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_LoaiGhe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_LoaiGhe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_LoaiGhe, ten_LoaiGhe, gia_Ve FROM dbo.LOAIGHE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.LOAIGHEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.LOAIGHEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.LOAIGHEDataTable = New dbQuanLyVeKhachDataSet1.LOAIGHEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.LOAIGHEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "LOAIGHE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_LoaiGhe As Integer, ByVal Original_ten_LoaiGhe As String, ByVal Original_gia_Ve As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_LoaiGhe,Integer)
            If (Original_ten_LoaiGhe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_LoaiGhe")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ten_LoaiGhe,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_gia_Ve,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ten_LoaiGhe As String, ByVal gia_Ve As Decimal) As Integer
            If (ten_LoaiGhe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_LoaiGhe")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ten_LoaiGhe,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(gia_Ve,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ten_LoaiGhe As String, ByVal gia_Ve As Decimal, ByVal Original_id_LoaiGhe As Integer, ByVal Original_ten_LoaiGhe As String, ByVal Original_gia_Ve As Decimal, ByVal id_LoaiGhe As Integer) As Integer
            If (ten_LoaiGhe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_LoaiGhe")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ten_LoaiGhe,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(gia_Ve,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id_LoaiGhe,Integer)
            If (Original_ten_LoaiGhe Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_LoaiGhe")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ten_LoaiGhe,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_gia_Ve,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(id_LoaiGhe,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ten_LoaiGhe As String, ByVal gia_Ve As Decimal, ByVal Original_id_LoaiGhe As Integer, ByVal Original_ten_LoaiGhe As String, ByVal Original_gia_Ve As Decimal) As Integer
            Return Me.Update(ten_LoaiGhe, gia_Ve, Original_id_LoaiGhe, Original_ten_LoaiGhe, Original_gia_Ve, Original_id_LoaiGhe)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class NGUOIDUNGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NGUOIDUNG"
            tableMapping.ColumnMappings.Add("id_NguoiDung", "id_NguoiDung")
            tableMapping.ColumnMappings.Add("ten_TaiKhoan", "ten_TaiKhoan")
            tableMapping.ColumnMappings.Add("ho_Ten", "ho_Ten")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("so_Dien_Thoai", "so_Dien_Thoai")
            tableMapping.ColumnMappings.Add("mat_Khau", "mat_Khau")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[NGUOIDUNG] WHERE (([id_NguoiDung] = @Original_id_NguoiDung) AN"& _ 
                "D ([ten_TaiKhoan] = @Original_ten_TaiKhoan) AND ([ho_Ten] = @Original_ho_Ten) AN"& _ 
                "D ([email] = @Original_email) AND ((@IsNull_so_Dien_Thoai = 1 AND [so_Dien_Thoai"& _ 
                "] IS NULL) OR ([so_Dien_Thoai] = @Original_so_Dien_Thoai)) AND ([mat_Khau] = @Or"& _ 
                "iginal_mat_Khau))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_NguoiDung"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_NguoiDung"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_TaiKhoan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ten_TaiKhoan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ho_Ten"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ho_Ten"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_email"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_so_Dien_Thoai"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "so_Dien_Thoai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_so_Dien_Thoai"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "so_Dien_Thoai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_mat_Khau"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "mat_Khau"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[NGUOIDUNG] ([ten_TaiKhoan], [ho_Ten], [email], [so_Dien_Thoai]"& _ 
                ", [mat_Khau]) VALUES (@ten_TaiKhoan, @ho_Ten, @email, @so_Dien_Thoai, @mat_Khau)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_NguoiDung, ten_TaiKhoan, ho_Ten, email, so_Dien_Thoai, mat_Khau FRO"& _ 
                "M NGUOIDUNG WHERE (id_NguoiDung = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_TaiKhoan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ten_TaiKhoan"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ho_Ten"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ho_Ten"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@email"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@so_Dien_Thoai"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "so_Dien_Thoai"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@mat_Khau"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "mat_Khau"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[NGUOIDUNG] SET [ten_TaiKhoan] = @ten_TaiKhoan, [ho_Ten] = @ho_Ten, "& _ 
                "[email] = @email, [so_Dien_Thoai] = @so_Dien_Thoai, [mat_Khau] = @mat_Khau WHERE"& _ 
                " (([id_NguoiDung] = @Original_id_NguoiDung) AND ([ten_TaiKhoan] = @Original_ten_"& _ 
                "TaiKhoan) AND ([ho_Ten] = @Original_ho_Ten) AND ([email] = @Original_email) AND "& _ 
                "((@IsNull_so_Dien_Thoai = 1 AND [so_Dien_Thoai] IS NULL) OR ([so_Dien_Thoai] = @"& _ 
                "Original_so_Dien_Thoai)) AND ([mat_Khau] = @Original_mat_Khau));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_Nguo"& _ 
                "iDung, ten_TaiKhoan, ho_Ten, email, so_Dien_Thoai, mat_Khau FROM NGUOIDUNG WHERE"& _ 
                " (id_NguoiDung = @id_NguoiDung)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_TaiKhoan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ten_TaiKhoan"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ho_Ten"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ho_Ten"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@email"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@so_Dien_Thoai"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "so_Dien_Thoai"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@mat_Khau"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "mat_Khau"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_NguoiDung"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_NguoiDung"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_TaiKhoan"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "ten_TaiKhoan"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ho_Ten"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ho_Ten"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_email"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "email"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_so_Dien_Thoai"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "so_Dien_Thoai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_so_Dien_Thoai"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "so_Dien_Thoai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_mat_Khau"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "mat_Khau"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_NguoiDung"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_NguoiDung"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_NguoiDung, ten_TaiKhoan, ho_Ten, email, so_Dien_Thoai, mat_Khau FROM db"& _ 
                "o.NGUOIDUNG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.NGUOIDUNGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.NGUOIDUNGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.NGUOIDUNGDataTable = New dbQuanLyVeKhachDataSet1.NGUOIDUNGDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.NGUOIDUNGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "NGUOIDUNG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_NguoiDung As Integer, ByVal Original_ten_TaiKhoan As String, ByVal Original_ho_Ten As String, ByVal Original_email As String, ByVal Original_so_Dien_Thoai As String, ByVal Original_mat_Khau As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_NguoiDung,Integer)
            If (Original_ten_TaiKhoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_TaiKhoan")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ten_TaiKhoan,String)
            End If
            If (Original_ho_Ten Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ho_Ten")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ho_Ten,String)
            End If
            If (Original_email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_email,String)
            End If
            If (Original_so_Dien_Thoai Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_so_Dien_Thoai,String)
            End If
            If (Original_mat_Khau Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mat_Khau")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_mat_Khau,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ten_TaiKhoan As String, ByVal ho_Ten As String, ByVal email As String, ByVal so_Dien_Thoai As String, ByVal mat_Khau As String) As Integer
            If (ten_TaiKhoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_TaiKhoan")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ten_TaiKhoan,String)
            End If
            If (ho_Ten Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ho_Ten")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ho_Ten,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(email,String)
            End If
            If (so_Dien_Thoai Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(so_Dien_Thoai,String)
            End If
            If (mat_Khau Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mat_Khau")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(mat_Khau,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ten_TaiKhoan As String, ByVal ho_Ten As String, ByVal email As String, ByVal so_Dien_Thoai As String, ByVal mat_Khau As String, ByVal Original_id_NguoiDung As Integer, ByVal Original_ten_TaiKhoan As String, ByVal Original_ho_Ten As String, ByVal Original_email As String, ByVal Original_so_Dien_Thoai As String, ByVal Original_mat_Khau As String, ByVal id_NguoiDung As Integer) As Integer
            If (ten_TaiKhoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_TaiKhoan")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ten_TaiKhoan,String)
            End If
            If (ho_Ten Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ho_Ten")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ho_Ten,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(email,String)
            End If
            If (so_Dien_Thoai Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(so_Dien_Thoai,String)
            End If
            If (mat_Khau Is Nothing) Then
                Throw New Global.System.ArgumentNullException("mat_Khau")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(mat_Khau,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_id_NguoiDung,Integer)
            If (Original_ten_TaiKhoan Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_TaiKhoan")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ten_TaiKhoan,String)
            End If
            If (Original_ho_Ten Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ho_Ten")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ho_Ten,String)
            End If
            If (Original_email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_email,String)
            End If
            If (Original_so_Dien_Thoai Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_so_Dien_Thoai,String)
            End If
            If (Original_mat_Khau Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_mat_Khau")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_mat_Khau,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(id_NguoiDung,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ten_TaiKhoan As String, ByVal ho_Ten As String, ByVal email As String, ByVal so_Dien_Thoai As String, ByVal mat_Khau As String, ByVal Original_id_NguoiDung As Integer, ByVal Original_ten_TaiKhoan As String, ByVal Original_ho_Ten As String, ByVal Original_email As String, ByVal Original_so_Dien_Thoai As String, ByVal Original_mat_Khau As String) As Integer
            Return Me.Update(ten_TaiKhoan, ho_Ten, email, so_Dien_Thoai, mat_Khau, Original_id_NguoiDung, Original_ten_TaiKhoan, Original_ho_Ten, Original_email, Original_so_Dien_Thoai, Original_mat_Khau, Original_id_NguoiDung)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TUYENDUONGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TUYENDUONG"
            tableMapping.ColumnMappings.Add("id_TuyenDuong", "id_TuyenDuong")
            tableMapping.ColumnMappings.Add("id_Ben_XuatPhat", "id_Ben_XuatPhat")
            tableMapping.ColumnMappings.Add("id_Ben_Dich", "id_Ben_Dich")
            tableMapping.ColumnMappings.Add("khoang_Cach_Km", "khoang_Cach_Km")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TUYENDUONG] WHERE (([id_TuyenDuong] = @Original_id_TuyenDuong)"& _ 
                " AND ([id_Ben_XuatPhat] = @Original_id_Ben_XuatPhat) AND ([id_Ben_Dich] = @Origi"& _ 
                "nal_id_Ben_Dich) AND ([khoang_Cach_Km] = @Original_khoang_Cach_Km))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_TuyenDuong"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_TuyenDuong"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ben_XuatPhat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_XuatPhat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ben_Dich"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_Dich"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_khoang_Cach_Km"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "khoang_Cach_Km"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TUYENDUONG] ([id_Ben_XuatPhat], [id_Ben_Dich], [khoang_Cach_Km"& _ 
                "]) VALUES (@id_Ben_XuatPhat, @id_Ben_Dich, @khoang_Cach_Km);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_TuyenDuo"& _ 
                "ng, id_Ben_XuatPhat, id_Ben_Dich, khoang_Cach_Km FROM TUYENDUONG WHERE (id_Tuyen"& _ 
                "Duong = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ben_XuatPhat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_XuatPhat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ben_Dich"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_Dich"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@khoang_Cach_Km"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "khoang_Cach_Km"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TUYENDUONG] SET [id_Ben_XuatPhat] = @id_Ben_XuatPhat, [id_Ben_Dich]"& _ 
                " = @id_Ben_Dich, [khoang_Cach_Km] = @khoang_Cach_Km WHERE (([id_TuyenDuong] = @O"& _ 
                "riginal_id_TuyenDuong) AND ([id_Ben_XuatPhat] = @Original_id_Ben_XuatPhat) AND ("& _ 
                "[id_Ben_Dich] = @Original_id_Ben_Dich) AND ([khoang_Cach_Km] = @Original_khoang_"& _ 
                "Cach_Km));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_TuyenDuong, id_Ben_XuatPhat, id_Ben_Dich, khoang_Cach_Km F"& _ 
                "ROM TUYENDUONG WHERE (id_TuyenDuong = @id_TuyenDuong)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ben_XuatPhat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_XuatPhat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ben_Dich"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_Dich"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@khoang_Cach_Km"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "khoang_Cach_Km"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_TuyenDuong"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_TuyenDuong"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ben_XuatPhat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_XuatPhat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ben_Dich"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ben_Dich"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_khoang_Cach_Km"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SqlDbType = Global.System.Data.SqlDbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "khoang_Cach_Km"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_TuyenDuong"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_TuyenDuong"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_TuyenDuong, id_Ben_XuatPhat, id_Ben_Dich, khoang_Cach_Km FROM dbo.TUYEN"& _ 
                "DUONG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.TUYENDUONGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.TUYENDUONGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.TUYENDUONGDataTable = New dbQuanLyVeKhachDataSet1.TUYENDUONGDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.TUYENDUONGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "TUYENDUONG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_TuyenDuong As Integer, ByVal Original_id_Ben_XuatPhat As Integer, ByVal Original_id_Ben_Dich As Integer, ByVal Original_khoang_Cach_Km As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_TuyenDuong,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_id_Ben_XuatPhat,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_Ben_Dich,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_khoang_Cach_Km,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_Ben_XuatPhat As Integer, ByVal id_Ben_Dich As Integer, ByVal khoang_Cach_Km As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_Ben_XuatPhat,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_Ben_Dich,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(khoang_Cach_Km,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_Ben_XuatPhat As Integer, ByVal id_Ben_Dich As Integer, ByVal khoang_Cach_Km As Decimal, ByVal Original_id_TuyenDuong As Integer, ByVal Original_id_Ben_XuatPhat As Integer, ByVal Original_id_Ben_Dich As Integer, ByVal Original_khoang_Cach_Km As Decimal, ByVal id_TuyenDuong As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_Ben_XuatPhat,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_Ben_Dich,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(khoang_Cach_Km,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_id_TuyenDuong,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id_Ben_XuatPhat,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_id_Ben_Dich,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_khoang_Cach_Km,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(id_TuyenDuong,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_Ben_XuatPhat As Integer, ByVal id_Ben_Dich As Integer, ByVal khoang_Cach_Km As Decimal, ByVal Original_id_TuyenDuong As Integer, ByVal Original_id_Ben_XuatPhat As Integer, ByVal Original_id_Ben_Dich As Integer, ByVal Original_khoang_Cach_Km As Decimal) As Integer
            Return Me.Update(id_Ben_XuatPhat, id_Ben_Dich, khoang_Cach_Km, Original_id_TuyenDuong, Original_id_Ben_XuatPhat, Original_id_Ben_Dich, Original_khoang_Cach_Km, Original_id_TuyenDuong)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VE"
            tableMapping.ColumnMappings.Add("id_Ve", "id_Ve")
            tableMapping.ColumnMappings.Add("id_ChuyenDi", "id_ChuyenDi")
            tableMapping.ColumnMappings.Add("id_NguoiDung", "id_NguoiDung")
            tableMapping.ColumnMappings.Add("id_Ghe", "id_Ghe")
            tableMapping.ColumnMappings.Add("ngay_Dat", "ngay_Dat")
            tableMapping.ColumnMappings.Add("trang_Thai", "trang_Thai")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VE] WHERE (([id_Ve] = @Original_id_Ve) AND ([id_ChuyenDi] = @O"& _ 
                "riginal_id_ChuyenDi) AND ([id_NguoiDung] = @Original_id_NguoiDung) AND ([id_Ghe]"& _ 
                " = @Original_id_Ghe) AND ((@IsNull_ngay_Dat = 1 AND [ngay_Dat] IS NULL) OR ([nga"& _ 
                "y_Dat] = @Original_ngay_Dat)) AND ((@IsNull_trang_Thai = 1 AND [trang_Thai] IS N"& _ 
                "ULL) OR ([trang_Thai] = @Original_trang_Thai)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ve"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_ChuyenDi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_ChuyenDi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_NguoiDung"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_NguoiDung"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ghe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ghe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_ngay_Dat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "ngay_Dat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ngay_Dat"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ngay_Dat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_trang_Thai"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "trang_Thai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_trang_Thai"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "trang_Thai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VE] ([id_ChuyenDi], [id_NguoiDung], [id_Ghe], [ngay_Dat], [tra"& _ 
                "ng_Thai]) VALUES (@id_ChuyenDi, @id_NguoiDung, @id_Ghe, @ngay_Dat, @trang_Thai);"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_Ve, id_ChuyenDi, id_NguoiDung, id_Ghe, ngay_Dat, trang_Thai FROM VE "& _ 
                "WHERE (id_Ve = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_ChuyenDi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_ChuyenDi"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_NguoiDung"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_NguoiDung"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ghe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ghe"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ngay_Dat"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ngay_Dat"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@trang_Thai"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "trang_Thai"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VE] SET [id_ChuyenDi] = @id_ChuyenDi, [id_NguoiDung] = @id_NguoiDun"& _ 
                "g, [id_Ghe] = @id_Ghe, [ngay_Dat] = @ngay_Dat, [trang_Thai] = @trang_Thai WHERE "& _ 
                "(([id_Ve] = @Original_id_Ve) AND ([id_ChuyenDi] = @Original_id_ChuyenDi) AND ([i"& _ 
                "d_NguoiDung] = @Original_id_NguoiDung) AND ([id_Ghe] = @Original_id_Ghe) AND ((@"& _ 
                "IsNull_ngay_Dat = 1 AND [ngay_Dat] IS NULL) OR ([ngay_Dat] = @Original_ngay_Dat)"& _ 
                ") AND ((@IsNull_trang_Thai = 1 AND [trang_Thai] IS NULL) OR ([trang_Thai] = @Ori"& _ 
                "ginal_trang_Thai)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_Ve, id_ChuyenDi, id_NguoiDung, id_Ghe, ngay_Dat,"& _ 
                " trang_Thai FROM VE WHERE (id_Ve = @id_Ve)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_ChuyenDi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_ChuyenDi"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_NguoiDung"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_NguoiDung"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ghe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ghe"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ngay_Dat"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ngay_Dat"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@trang_Thai"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "trang_Thai"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ve"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ve"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_ChuyenDi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_ChuyenDi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_NguoiDung"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_NguoiDung"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_Ghe"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_Ghe"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_ngay_Dat"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "ngay_Dat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ngay_Dat"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SqlDbType = Global.System.Data.SqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ngay_Dat"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@IsNull_trang_Thai"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "trang_Thai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_trang_Thai"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "trang_Thai"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_Ve"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_Ve"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_Ve, id_ChuyenDi, id_NguoiDung, id_Ghe, ngay_Dat, trang_Thai FROM dbo.VE"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.VEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.VEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.VEDataTable = New dbQuanLyVeKhachDataSet1.VEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.VEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "VE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_Ve As Integer, ByVal Original_id_ChuyenDi As Integer, ByVal Original_id_NguoiDung As Integer, ByVal Original_id_Ghe As Integer, ByVal Original_ngay_Dat As Global.System.Nullable(Of Date), ByVal Original_trang_Thai As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_Ve,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_id_ChuyenDi,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_NguoiDung,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_id_Ghe,Integer)
            If (Original_ngay_Dat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ngay_Dat.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_trang_Thai Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_trang_Thai,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_ChuyenDi As Integer, ByVal id_NguoiDung As Integer, ByVal id_Ghe As Integer, ByVal ngay_Dat As Global.System.Nullable(Of Date), ByVal trang_Thai As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_ChuyenDi,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_NguoiDung,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_Ghe,Integer)
            If (ngay_Dat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ngay_Dat.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (trang_Thai Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(trang_Thai,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_ChuyenDi As Integer, ByVal id_NguoiDung As Integer, ByVal id_Ghe As Integer, ByVal ngay_Dat As Global.System.Nullable(Of Date), ByVal trang_Thai As String, ByVal Original_id_Ve As Integer, ByVal Original_id_ChuyenDi As Integer, ByVal Original_id_NguoiDung As Integer, ByVal Original_id_Ghe As Integer, ByVal Original_ngay_Dat As Global.System.Nullable(Of Date), ByVal Original_trang_Thai As String, ByVal id_Ve As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_ChuyenDi,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_NguoiDung,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(id_Ghe,Integer)
            If (ngay_Dat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ngay_Dat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (trang_Thai Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(trang_Thai,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_id_Ve,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id_ChuyenDi,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_id_NguoiDung,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_id_Ghe,Integer)
            If (Original_ngay_Dat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ngay_Dat.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_trang_Thai Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_trang_Thai,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(id_Ve,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_ChuyenDi As Integer, ByVal id_NguoiDung As Integer, ByVal id_Ghe As Integer, ByVal ngay_Dat As Global.System.Nullable(Of Date), ByVal trang_Thai As String, ByVal Original_id_Ve As Integer, ByVal Original_id_ChuyenDi As Integer, ByVal Original_id_NguoiDung As Integer, ByVal Original_id_Ghe As Integer, ByVal Original_ngay_Dat As Global.System.Nullable(Of Date), ByVal Original_trang_Thai As String) As Integer
            Return Me.Update(id_ChuyenDi, id_NguoiDung, id_Ghe, ngay_Dat, trang_Thai, Original_id_Ve, Original_id_ChuyenDi, Original_id_NguoiDung, Original_id_Ghe, Original_ngay_Dat, Original_trang_Thai, Original_id_Ve)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class XEBUYTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "XEBUYT"
            tableMapping.ColumnMappings.Add("id_XeBuyt", "id_XeBuyt")
            tableMapping.ColumnMappings.Add("bien_So", "bien_So")
            tableMapping.ColumnMappings.Add("ten_XeBuyt", "ten_XeBuyt")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[XEBUYT] WHERE (([id_XeBuyt] = @Original_id_XeBuyt) AND ([bien_"& _ 
                "So] = @Original_bien_So) AND ([ten_XeBuyt] = @Original_ten_XeBuyt))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_bien_So"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "bien_So"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_XeBuyt"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[XEBUYT] ([bien_So], [ten_XeBuyt]) VALUES (@bien_So, @ten_XeBuy"& _ 
                "t);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_XeBuyt, bien_So, ten_XeBuyt FROM XEBUYT WHERE (id_XeBuyt = SCOPE_"& _ 
                "IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@bien_So"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "bien_So"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_XeBuyt"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_XeBuyt"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[XEBUYT] SET [bien_So] = @bien_So, [ten_XeBuyt] = @ten_XeBuyt WHERE "& _ 
                "(([id_XeBuyt] = @Original_id_XeBuyt) AND ([bien_So] = @Original_bien_So) AND ([t"& _ 
                "en_XeBuyt] = @Original_ten_XeBuyt));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_XeBuyt, bien_So, ten_XeBuyt FROM"& _ 
                " XEBUYT WHERE (id_XeBuyt = @id_XeBuyt)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@bien_So"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "bien_So"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@ten_XeBuyt"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_XeBuyt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_bien_So"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "bien_So"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Original_ten_XeBuyt"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "ten_XeBuyt"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@id_XeBuyt"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "id_XeBuyt"
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.QuanLyXeBuyt.My.MySettings.Default.dbQuanLyVeKhachConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_XeBuyt, bien_So, ten_XeBuyt FROM dbo.XEBUYT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbQuanLyVeKhachDataSet1.XEBUYTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbQuanLyVeKhachDataSet1.XEBUYTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbQuanLyVeKhachDataSet1.XEBUYTDataTable = New dbQuanLyVeKhachDataSet1.XEBUYTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbQuanLyVeKhachDataSet1.XEBUYTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "XEBUYT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_XeBuyt As Integer, ByVal Original_bien_So As String, ByVal Original_ten_XeBuyt As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_XeBuyt,Integer)
            If (Original_bien_So Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bien_So")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_bien_So,String)
            End If
            If (Original_ten_XeBuyt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_XeBuyt")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ten_XeBuyt,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal bien_So As String, ByVal ten_XeBuyt As String) As Integer
            If (bien_So Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bien_So")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(bien_So,String)
            End If
            If (ten_XeBuyt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_XeBuyt")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ten_XeBuyt,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal bien_So As String, ByVal ten_XeBuyt As String, ByVal Original_id_XeBuyt As Integer, ByVal Original_bien_So As String, ByVal Original_ten_XeBuyt As String, ByVal id_XeBuyt As Integer) As Integer
            If (bien_So Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bien_So")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(bien_So,String)
            End If
            If (ten_XeBuyt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ten_XeBuyt")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ten_XeBuyt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id_XeBuyt,Integer)
            If (Original_bien_So Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bien_So")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_bien_So,String)
            End If
            If (Original_ten_XeBuyt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ten_XeBuyt")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ten_XeBuyt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(id_XeBuyt,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal bien_So As String, ByVal ten_XeBuyt As String, ByVal Original_id_XeBuyt As Integer, ByVal Original_bien_So As String, ByVal Original_ten_XeBuyt As String) As Integer
            Return Me.Update(bien_So, ten_XeBuyt, Original_id_XeBuyt, Original_bien_So, Original_ten_XeBuyt, Original_id_XeBuyt)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _bENXETableAdapter As BENXETableAdapter
        
        Private _cHUYENDITableAdapter As CHUYENDITableAdapter
        
        Private _gHETableAdapter As GHETableAdapter
        
        Private _lOAIGHETableAdapter As LOAIGHETableAdapter
        
        Private _nGUOIDUNGTableAdapter As NGUOIDUNGTableAdapter
        
        Private _tUYENDUONGTableAdapter As TUYENDUONGTableAdapter
        
        Private _vETableAdapter As VETableAdapter
        
        Private _xEBUYTTableAdapter As XEBUYTTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BENXETableAdapter() As BENXETableAdapter
            Get
                Return Me._bENXETableAdapter
            End Get
            Set
                Me._bENXETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CHUYENDITableAdapter() As CHUYENDITableAdapter
            Get
                Return Me._cHUYENDITableAdapter
            End Get
            Set
                Me._cHUYENDITableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property GHETableAdapter() As GHETableAdapter
            Get
                Return Me._gHETableAdapter
            End Get
            Set
                Me._gHETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LOAIGHETableAdapter() As LOAIGHETableAdapter
            Get
                Return Me._lOAIGHETableAdapter
            End Get
            Set
                Me._lOAIGHETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property NGUOIDUNGTableAdapter() As NGUOIDUNGTableAdapter
            Get
                Return Me._nGUOIDUNGTableAdapter
            End Get
            Set
                Me._nGUOIDUNGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TUYENDUONGTableAdapter() As TUYENDUONGTableAdapter
            Get
                Return Me._tUYENDUONGTableAdapter
            End Get
            Set
                Me._tUYENDUONGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VETableAdapter() As VETableAdapter
            Get
                Return Me._vETableAdapter
            End Get
            Set
                Me._vETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property XEBUYTTableAdapter() As XEBUYTTableAdapter
            Get
                Return Me._xEBUYTTableAdapter
            End Get
            Set
                Me._xEBUYTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._bENXETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bENXETableAdapter.Connection) Is Nothing)) Then
                    Return Me._bENXETableAdapter.Connection
                End If
                If ((Not (Me._cHUYENDITableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cHUYENDITableAdapter.Connection) Is Nothing)) Then
                    Return Me._cHUYENDITableAdapter.Connection
                End If
                If ((Not (Me._gHETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._gHETableAdapter.Connection) Is Nothing)) Then
                    Return Me._gHETableAdapter.Connection
                End If
                If ((Not (Me._lOAIGHETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lOAIGHETableAdapter.Connection) Is Nothing)) Then
                    Return Me._lOAIGHETableAdapter.Connection
                End If
                If ((Not (Me._nGUOIDUNGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._nGUOIDUNGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._nGUOIDUNGTableAdapter.Connection
                End If
                If ((Not (Me._tUYENDUONGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tUYENDUONGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tUYENDUONGTableAdapter.Connection
                End If
                If ((Not (Me._vETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vETableAdapter.Connection) Is Nothing)) Then
                    Return Me._vETableAdapter.Connection
                End If
                If ((Not (Me._xEBUYTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._xEBUYTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._xEBUYTTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._bENXETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cHUYENDITableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._gHETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lOAIGHETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._nGUOIDUNGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tUYENDUONGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._xEBUYTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dbQuanLyVeKhachDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._bENXETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BENXE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bENXETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tUYENDUONGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TUYENDUONG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tUYENDUONGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._xEBUYTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.XEBUYT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._xEBUYTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cHUYENDITableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CHUYENDI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cHUYENDITableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._gHETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.GHE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._gHETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lOAIGHETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LOAIGHE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lOAIGHETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._nGUOIDUNGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.NGUOIDUNG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._nGUOIDUNGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dbQuanLyVeKhachDataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._bENXETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BENXE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bENXETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tUYENDUONGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TUYENDUONG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tUYENDUONGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._xEBUYTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.XEBUYT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._xEBUYTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cHUYENDITableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CHUYENDI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cHUYENDITableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._gHETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.GHE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._gHETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lOAIGHETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LOAIGHE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lOAIGHETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._nGUOIDUNGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.NGUOIDUNG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._nGUOIDUNGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dbQuanLyVeKhachDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._vETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._nGUOIDUNGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.NGUOIDUNG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._nGUOIDUNGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lOAIGHETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LOAIGHE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lOAIGHETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._gHETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.GHE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._gHETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cHUYENDITableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CHUYENDI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cHUYENDITableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._xEBUYTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.XEBUYT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._xEBUYTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tUYENDUONGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TUYENDUONG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tUYENDUONGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bENXETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BENXE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bENXETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dbQuanLyVeKhachDataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._bENXETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bENXETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cHUYENDITableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cHUYENDITableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._gHETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._gHETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lOAIGHETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lOAIGHETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._nGUOIDUNGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._nGUOIDUNGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tUYENDUONGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tUYENDUONGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._vETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._xEBUYTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._xEBUYTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._bENXETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bENXETableAdapter, Me._bENXETableAdapter.Connection)
                    Me._bENXETableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._bENXETableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._bENXETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bENXETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bENXETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cHUYENDITableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cHUYENDITableAdapter, Me._cHUYENDITableAdapter.Connection)
                    Me._cHUYENDITableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._cHUYENDITableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._cHUYENDITableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cHUYENDITableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cHUYENDITableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._gHETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._gHETableAdapter, Me._gHETableAdapter.Connection)
                    Me._gHETableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._gHETableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._gHETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._gHETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._gHETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lOAIGHETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lOAIGHETableAdapter, Me._lOAIGHETableAdapter.Connection)
                    Me._lOAIGHETableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._lOAIGHETableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._lOAIGHETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lOAIGHETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lOAIGHETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._nGUOIDUNGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._nGUOIDUNGTableAdapter, Me._nGUOIDUNGTableAdapter.Connection)
                    Me._nGUOIDUNGTableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._nGUOIDUNGTableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._nGUOIDUNGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._nGUOIDUNGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._nGUOIDUNGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tUYENDUONGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tUYENDUONGTableAdapter, Me._tUYENDUONGTableAdapter.Connection)
                    Me._tUYENDUONGTableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._tUYENDUONGTableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._tUYENDUONGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tUYENDUONGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tUYENDUONGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vETableAdapter, Me._vETableAdapter.Connection)
                    Me._vETableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._vETableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._vETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._xEBUYTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._xEBUYTTableAdapter, Me._xEBUYTTableAdapter.Connection)
                    Me._xEBUYTTableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._xEBUYTTableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._xEBUYTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._xEBUYTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._xEBUYTTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._bENXETableAdapter) Is Nothing) Then
                    Me._bENXETableAdapter.Connection = CType(revertConnections(Me._bENXETableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._bENXETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cHUYENDITableAdapter) Is Nothing) Then
                    Me._cHUYENDITableAdapter.Connection = CType(revertConnections(Me._cHUYENDITableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._cHUYENDITableAdapter.Transaction = Nothing
                End If
                If (Not (Me._gHETableAdapter) Is Nothing) Then
                    Me._gHETableAdapter.Connection = CType(revertConnections(Me._gHETableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._gHETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lOAIGHETableAdapter) Is Nothing) Then
                    Me._lOAIGHETableAdapter.Connection = CType(revertConnections(Me._lOAIGHETableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._lOAIGHETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._nGUOIDUNGTableAdapter) Is Nothing) Then
                    Me._nGUOIDUNGTableAdapter.Connection = CType(revertConnections(Me._nGUOIDUNGTableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._nGUOIDUNGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tUYENDUONGTableAdapter) Is Nothing) Then
                    Me._tUYENDUONGTableAdapter.Connection = CType(revertConnections(Me._tUYENDUONGTableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._tUYENDUONGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vETableAdapter) Is Nothing) Then
                    Me._vETableAdapter.Connection = CType(revertConnections(Me._vETableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._vETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._xEBUYTTableAdapter) Is Nothing) Then
                    Me._xEBUYTTableAdapter.Connection = CType(revertConnections(Me._xEBUYTTableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._xEBUYTTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
